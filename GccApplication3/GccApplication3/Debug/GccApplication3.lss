
GccApplication3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000015c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004a  00800060  000015c8  0000165c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000003  008000aa  008000aa  000016a6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000016a6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000016d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001c0  00000000  00000000  00001714  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000277b  00000000  00000000  000018d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c1d  00000000  00000000  0000404f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001038  00000000  00000000  00004c6c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004d8  00000000  00000000  00005ca4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000dd1  00000000  00000000  0000617c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018ce  00000000  00000000  00006f4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  0000881b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__ctors_end>
       4:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
       8:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
       c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      10:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      14:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      18:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      1c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      20:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      24:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      28:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      2c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      30:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      34:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      38:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      3c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      40:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      44:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      48:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      4c:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      50:	0c 94 a2 00 	jmp	0x144	; 0x144 <__bad_interrupt>
      54:	bd 04       	cpc	r11, r13
      56:	40 05       	cpc	r20, r0
      58:	40 05       	cpc	r20, r0
      5a:	40 05       	cpc	r20, r0
      5c:	40 05       	cpc	r20, r0
      5e:	9c 04       	cpc	r9, r12
      60:	40 05       	cpc	r20, r0
      62:	40 05       	cpc	r20, r0
      64:	40 05       	cpc	r20, r0
      66:	40 05       	cpc	r20, r0
      68:	40 05       	cpc	r20, r0
      6a:	40 05       	cpc	r20, r0
      6c:	40 05       	cpc	r20, r0
      6e:	c8 04       	cpc	r12, r8
      70:	b2 04       	cpc	r11, r2
      72:	40 05       	cpc	r20, r0
      74:	d3 04       	cpc	r13, r3
      76:	de 04       	cpc	r13, r14
      78:	e9 04       	cpc	r14, r9
      7a:	f4 04       	cpc	r15, r4
      7c:	ff 04       	cpc	r15, r15
      7e:	0a 05       	cpc	r16, r10
      80:	15 05       	cpc	r17, r5
      82:	20 05       	cpc	r18, r0
      84:	2b 05       	cpc	r18, r11
      86:	36 05       	cpc	r19, r6
      88:	40 05       	cpc	r20, r0
      8a:	40 05       	cpc	r20, r0
      8c:	40 05       	cpc	r20, r0
      8e:	a7 04       	cpc	r10, r7
      90:	40 05       	cpc	r20, r0
      92:	40 05       	cpc	r20, r0
      94:	40 05       	cpc	r20, r0
      96:	e1 03       	fmuls	r22, r17
      98:	40 05       	cpc	r20, r0
      9a:	2e 04       	cpc	r2, r14
      9c:	44 04       	cpc	r4, r4
      9e:	02 04       	cpc	r0, r2
      a0:	ec 03       	fmulsu	r22, r20
      a2:	40 05       	cpc	r20, r0
      a4:	65 04       	cpc	r6, r5
      a6:	91 04       	cpc	r9, r1
      a8:	40 05       	cpc	r20, r0
      aa:	5a 04       	cpc	r5, r10
      ac:	40 05       	cpc	r20, r0
      ae:	7b 04       	cpc	r7, r11
      b0:	23 04       	cpc	r2, r3
      b2:	40 05       	cpc	r20, r0
      b4:	40 05       	cpc	r20, r0
      b6:	0d 04       	cpc	r0, r13
      b8:	f7 03       	fmuls	r23, r23
      ba:	86 04       	cpc	r8, r6
      bc:	4f 04       	cpc	r4, r15
      be:	18 04       	cpc	r1, r8
      c0:	40 05       	cpc	r20, r0
      c2:	40 05       	cpc	r20, r0
      c4:	40 05       	cpc	r20, r0
      c6:	39 04       	cpc	r3, r9
      c8:	70 04       	cpc	r7, r0
      ca:	40 05       	cpc	r20, r0
      cc:	40 05       	cpc	r20, r0
      ce:	40 05       	cpc	r20, r0
      d0:	40 05       	cpc	r20, r0
      d2:	40 05       	cpc	r20, r0
      d4:	40 05       	cpc	r20, r0
      d6:	e1 03       	fmuls	r22, r17
      d8:	40 05       	cpc	r20, r0
      da:	2e 04       	cpc	r2, r14
      dc:	44 04       	cpc	r4, r4
      de:	02 04       	cpc	r0, r2
      e0:	ec 03       	fmulsu	r22, r20
      e2:	40 05       	cpc	r20, r0
      e4:	65 04       	cpc	r6, r5
      e6:	91 04       	cpc	r9, r1
      e8:	40 05       	cpc	r20, r0
      ea:	5a 04       	cpc	r5, r10
      ec:	40 05       	cpc	r20, r0
      ee:	7b 04       	cpc	r7, r11
      f0:	23 04       	cpc	r2, r3
      f2:	40 05       	cpc	r20, r0
      f4:	40 05       	cpc	r20, r0
      f6:	0d 04       	cpc	r0, r13
      f8:	f7 03       	fmuls	r23, r23
      fa:	86 04       	cpc	r8, r6
      fc:	4f 04       	cpc	r4, r15
      fe:	18 04       	cpc	r1, r8
     100:	40 05       	cpc	r20, r0
     102:	40 05       	cpc	r20, r0
     104:	40 05       	cpc	r20, r0
     106:	39 04       	cpc	r3, r9
     108:	70 04       	cpc	r7, r0

0000010a <__ctors_end>:
     10a:	11 24       	eor	r1, r1
     10c:	1f be       	out	0x3f, r1	; 63
     10e:	cf e5       	ldi	r28, 0x5F	; 95
     110:	d8 e0       	ldi	r29, 0x08	; 8
     112:	de bf       	out	0x3e, r29	; 62
     114:	cd bf       	out	0x3d, r28	; 61

00000116 <__do_copy_data>:
     116:	10 e0       	ldi	r17, 0x00	; 0
     118:	a0 e6       	ldi	r26, 0x60	; 96
     11a:	b0 e0       	ldi	r27, 0x00	; 0
     11c:	e8 ec       	ldi	r30, 0xC8	; 200
     11e:	f5 e1       	ldi	r31, 0x15	; 21
     120:	02 c0       	rjmp	.+4      	; 0x126 <__do_copy_data+0x10>
     122:	05 90       	lpm	r0, Z+
     124:	0d 92       	st	X+, r0
     126:	aa 3a       	cpi	r26, 0xAA	; 170
     128:	b1 07       	cpc	r27, r17
     12a:	d9 f7       	brne	.-10     	; 0x122 <__do_copy_data+0xc>

0000012c <__do_clear_bss>:
     12c:	20 e0       	ldi	r18, 0x00	; 0
     12e:	aa ea       	ldi	r26, 0xAA	; 170
     130:	b0 e0       	ldi	r27, 0x00	; 0
     132:	01 c0       	rjmp	.+2      	; 0x136 <.do_clear_bss_start>

00000134 <.do_clear_bss_loop>:
     134:	1d 92       	st	X+, r1

00000136 <.do_clear_bss_start>:
     136:	ad 3a       	cpi	r26, 0xAD	; 173
     138:	b2 07       	cpc	r27, r18
     13a:	e1 f7       	brne	.-8      	; 0x134 <.do_clear_bss_loop>
     13c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <main>
     140:	0c 94 e2 0a 	jmp	0x15c4	; 0x15c4 <_exit>

00000144 <__bad_interrupt>:
     144:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000148 <PWMDrawer_Init>:



void PWMDrawer_Init(void) {

		GLCD_Init();
     148:	0e 94 01 03 	call	0x602	; 0x602 <GLCD_Init>
		GLCD_ClearDisplay();
     14c:	0e 94 21 06 	call	0xc42	; 0xc42 <GLCD_ClearDisplay>
		PWM_Init(&PWM_Setup[0]);		/* Timer 0 on OC0=PB3 */
     150:	8c e9       	ldi	r24, 0x9C	; 156
     152:	90 e0       	ldi	r25, 0x00	; 0
     154:	0e 94 e4 07 	call	0xfc8	; 0xfc8 <PWM_Init>
		ICU_Init(&ICU_SetUp);			/* Timer 1 is used for Input Capture */
     158:	85 ea       	ldi	r24, 0xA5	; 165
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	0e 94 03 07 	call	0xe06	; 0xe06 <ICU_Init>
     160:	08 95       	ret

00000162 <PWMDrawer_MeasureSignal>:
}

void PWMDrawer_MeasureSignal(PWMDrawer_SignalAttributesType* Signal_Data_Ptr) {
     162:	8f 92       	push	r8
     164:	9f 92       	push	r9
     166:	af 92       	push	r10
     168:	bf 92       	push	r11
     16a:	cf 92       	push	r12
     16c:	df 92       	push	r13
     16e:	ef 92       	push	r14
     170:	ff 92       	push	r15
     172:	0f 93       	push	r16
     174:	1f 93       	push	r17
     176:	cf 93       	push	r28
     178:	df 93       	push	r29
     17a:	cd b7       	in	r28, 0x3d	; 61
     17c:	de b7       	in	r29, 0x3e	; 62
     17e:	28 97       	sbiw	r28, 0x08	; 8
     180:	0f b6       	in	r0, 0x3f	; 63
     182:	f8 94       	cli
     184:	de bf       	out	0x3e, r29	; 62
     186:	0f be       	out	0x3f, r0	; 63
     188:	cd bf       	out	0x3d, r28	; 61
     18a:	8c 01       	movw	r16, r24
	ICU_DutyCycleType strLocal_Duty = {0, 0};
     18c:	19 82       	std	Y+1, r1	; 0x01
     18e:	1a 82       	std	Y+2, r1	; 0x02
     190:	1b 82       	std	Y+3, r1	; 0x03
     192:	1c 82       	std	Y+4, r1	; 0x04
     194:	1d 82       	std	Y+5, r1	; 0x05
     196:	1e 82       	std	Y+6, r1	; 0x06
     198:	1f 82       	std	Y+7, r1	; 0x07
     19a:	18 86       	std	Y+8, r1	; 0x08
	ICU_GetDutyCycle(ICU_TIMER_1, 8U, &strLocal_Duty);
     19c:	ae 01       	movw	r20, r28
     19e:	4f 5f       	subi	r20, 0xFF	; 255
     1a0:	5f 4f       	sbci	r21, 0xFF	; 255
     1a2:	68 e0       	ldi	r22, 0x08	; 8
     1a4:	70 e0       	ldi	r23, 0x00	; 0
     1a6:	80 e0       	ldi	r24, 0x00	; 0
     1a8:	0e 94 3d 07 	call	0xe7a	; 0xe7a <ICU_GetDutyCycle>
	Signal_Data_Ptr->Period_Time_ms = strLocal_Duty.Period_Time;
     1ac:	cd 80       	ldd	r12, Y+5	; 0x05
     1ae:	de 80       	ldd	r13, Y+6	; 0x06
     1b0:	ef 80       	ldd	r14, Y+7	; 0x07
     1b2:	f8 84       	ldd	r15, Y+8	; 0x08
     1b4:	f8 01       	movw	r30, r16
     1b6:	c1 86       	std	Z+9, r12	; 0x09
     1b8:	d2 86       	std	Z+10, r13	; 0x0a
     1ba:	e3 86       	std	Z+11, r14	; 0x0b
     1bc:	f4 86       	std	Z+12, r15	; 0x0c
	Signal_Data_Ptr->High_Time_ms = strLocal_Duty.High_Time;
     1be:	89 80       	ldd	r8, Y+1	; 0x01
     1c0:	9a 80       	ldd	r9, Y+2	; 0x02
     1c2:	ab 80       	ldd	r10, Y+3	; 0x03
     1c4:	bc 80       	ldd	r11, Y+4	; 0x04
     1c6:	81 82       	std	Z+1, r8	; 0x01
     1c8:	92 82       	std	Z+2, r9	; 0x02
     1ca:	a3 82       	std	Z+3, r10	; 0x03
     1cc:	b4 82       	std	Z+4, r11	; 0x04
	Signal_Data_Ptr->Low_Time_ms = strLocal_Duty.Period_Time - strLocal_Duty.High_Time;
     1ce:	a5 01       	movw	r20, r10
     1d0:	94 01       	movw	r18, r8
     1d2:	c7 01       	movw	r24, r14
     1d4:	b6 01       	movw	r22, r12
     1d6:	0e 94 4a 08 	call	0x1094	; 0x1094 <__subsf3>
     1da:	f8 01       	movw	r30, r16
     1dc:	65 83       	std	Z+5, r22	; 0x05
     1de:	76 83       	std	Z+6, r23	; 0x06
     1e0:	87 83       	std	Z+7, r24	; 0x07
     1e2:	90 87       	std	Z+8, r25	; 0x08
	
	Signal_Data_Ptr->Freq_kHz = (1.0 / (Signal_Data_Ptr->Period_Time_ms));
     1e4:	a7 01       	movw	r20, r14
     1e6:	96 01       	movw	r18, r12
     1e8:	60 e0       	ldi	r22, 0x00	; 0
     1ea:	70 e0       	ldi	r23, 0x00	; 0
     1ec:	80 e8       	ldi	r24, 0x80	; 128
     1ee:	9f e3       	ldi	r25, 0x3F	; 63
     1f0:	0e 94 b7 08 	call	0x116e	; 0x116e <__divsf3>
     1f4:	f8 01       	movw	r30, r16
     1f6:	65 87       	std	Z+13, r22	; 0x0d
     1f8:	76 87       	std	Z+14, r23	; 0x0e
     1fa:	87 87       	std	Z+15, r24	; 0x0f
     1fc:	90 8b       	std	Z+16, r25	; 0x10
	Signal_Data_Ptr->Duty_Percent = (uint8)((Signal_Data_Ptr->High_Time_ms) * 100.0 / (Signal_Data_Ptr->Period_Time_ms));
     1fe:	20 e0       	ldi	r18, 0x00	; 0
     200:	30 e0       	ldi	r19, 0x00	; 0
     202:	48 ec       	ldi	r20, 0xC8	; 200
     204:	52 e4       	ldi	r21, 0x42	; 66
     206:	c5 01       	movw	r24, r10
     208:	b4 01       	movw	r22, r8
     20a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__mulsf3>
     20e:	a7 01       	movw	r20, r14
     210:	96 01       	movw	r18, r12
     212:	0e 94 b7 08 	call	0x116e	; 0x116e <__divsf3>
     216:	0e 94 29 09 	call	0x1252	; 0x1252 <__fixunssfsi>
     21a:	f8 01       	movw	r30, r16
     21c:	60 83       	st	Z, r22
}
     21e:	28 96       	adiw	r28, 0x08	; 8
     220:	0f b6       	in	r0, 0x3f	; 63
     222:	f8 94       	cli
     224:	de bf       	out	0x3e, r29	; 62
     226:	0f be       	out	0x3f, r0	; 63
     228:	cd bf       	out	0x3d, r28	; 61
     22a:	df 91       	pop	r29
     22c:	cf 91       	pop	r28
     22e:	1f 91       	pop	r17
     230:	0f 91       	pop	r16
     232:	ff 90       	pop	r15
     234:	ef 90       	pop	r14
     236:	df 90       	pop	r13
     238:	cf 90       	pop	r12
     23a:	bf 90       	pop	r11
     23c:	af 90       	pop	r10
     23e:	9f 90       	pop	r9
     240:	8f 90       	pop	r8
     242:	08 95       	ret

00000244 <PWMDrawer_DrawSignal>:

void PWMDrawer_DrawSignal(PWMDrawer_SignalAttributesType* Signal_Data_Ptr, float32 Scale_ms) {
     244:	af 92       	push	r10
     246:	bf 92       	push	r11
     248:	cf 92       	push	r12
     24a:	df 92       	push	r13
     24c:	ef 92       	push	r14
     24e:	ff 92       	push	r15
     250:	0f 93       	push	r16
     252:	1f 93       	push	r17
     254:	cf 93       	push	r28
     256:	df 93       	push	r29
     258:	cd b7       	in	r28, 0x3d	; 61
     25a:	de b7       	in	r29, 0x3e	; 62
     25c:	ec 97       	sbiw	r28, 0x3c	; 60
     25e:	0f b6       	in	r0, 0x3f	; 63
     260:	f8 94       	cli
     262:	de bf       	out	0x3e, r29	; 62
     264:	0f be       	out	0x3f, r0	; 63
     266:	cd bf       	out	0x3d, r28	; 61
     268:	5c 01       	movw	r10, r24
     26a:	6a 01       	movw	r12, r20
     26c:	7b 01       	movw	r14, r22
	GLCD_ClearDisplay();
     26e:	0e 94 21 06 	call	0xc42	; 0xc42 <GLCD_ClearDisplay>
	/* Display Signal Data (Frequency and Duty) Values */
	GLCD_GoToLine(0);
     272:	80 e0       	ldi	r24, 0x00	; 0
     274:	0e 94 0d 06 	call	0xc1a	; 0xc1a <GLCD_GoToLine>
	char txt1[15] = "Frequency=\0";
     278:	8c e0       	ldi	r24, 0x0C	; 12
     27a:	e0 e6       	ldi	r30, 0x60	; 96
     27c:	f0 e0       	ldi	r31, 0x00	; 0
     27e:	de 01       	movw	r26, r28
     280:	11 96       	adiw	r26, 0x01	; 1
     282:	01 90       	ld	r0, Z+
     284:	0d 92       	st	X+, r0
     286:	8a 95       	dec	r24
     288:	e1 f7       	brne	.-8      	; 0x282 <PWMDrawer_DrawSignal+0x3e>
     28a:	fe 01       	movw	r30, r28
     28c:	3d 96       	adiw	r30, 0x0d	; 13
     28e:	83 e0       	ldi	r24, 0x03	; 3
     290:	df 01       	movw	r26, r30
     292:	1d 92       	st	X+, r1
     294:	8a 95       	dec	r24
     296:	e9 f7       	brne	.-6      	; 0x292 <PWMDrawer_DrawSignal+0x4e>
	GLCD_DisplayString(txt1);
     298:	ce 01       	movw	r24, r28
     29a:	01 96       	adiw	r24, 0x01	; 1
     29c:	0e 94 5e 05 	call	0xabc	; 0xabc <GLCD_DisplayString>
	GLCD_DisplayFloatingPoint(Signal_Data_Ptr->Freq_kHz);
     2a0:	f5 01       	movw	r30, r10
     2a2:	65 85       	ldd	r22, Z+13	; 0x0d
     2a4:	76 85       	ldd	r23, Z+14	; 0x0e
     2a6:	87 85       	ldd	r24, Z+15	; 0x0f
     2a8:	90 89       	ldd	r25, Z+16	; 0x10
     2aa:	0e 94 c0 05 	call	0xb80	; 0xb80 <GLCD_DisplayFloatingPoint>
	char txt2[5] = " kHz\0";
     2ae:	85 e0       	ldi	r24, 0x05	; 5
     2b0:	e7 e9       	ldi	r30, 0x97	; 151
     2b2:	f0 e0       	ldi	r31, 0x00	; 0
     2b4:	de 01       	movw	r26, r28
     2b6:	50 96       	adiw	r26, 0x10	; 16
     2b8:	01 90       	ld	r0, Z+
     2ba:	0d 92       	st	X+, r0
     2bc:	8a 95       	dec	r24
     2be:	e1 f7       	brne	.-8      	; 0x2b8 <PWMDrawer_DrawSignal+0x74>
	GLCD_DisplayString(txt2);
     2c0:	ce 01       	movw	r24, r28
     2c2:	40 96       	adiw	r24, 0x10	; 16
     2c4:	0e 94 5e 05 	call	0xabc	; 0xabc <GLCD_DisplayString>

	GLCD_GoToLine(1);
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	0e 94 0d 06 	call	0xc1a	; 0xc1a <GLCD_GoToLine>
	char txt3[15] = "Duty=\0";
     2ce:	87 e0       	ldi	r24, 0x07	; 7
     2d0:	ef e6       	ldi	r30, 0x6F	; 111
     2d2:	f0 e0       	ldi	r31, 0x00	; 0
     2d4:	de 01       	movw	r26, r28
     2d6:	55 96       	adiw	r26, 0x15	; 21
     2d8:	01 90       	ld	r0, Z+
     2da:	0d 92       	st	X+, r0
     2dc:	8a 95       	dec	r24
     2de:	e1 f7       	brne	.-8      	; 0x2d8 <PWMDrawer_DrawSignal+0x94>
     2e0:	fe 01       	movw	r30, r28
     2e2:	7c 96       	adiw	r30, 0x1c	; 28
     2e4:	88 e0       	ldi	r24, 0x08	; 8
     2e6:	df 01       	movw	r26, r30
     2e8:	1d 92       	st	X+, r1
     2ea:	8a 95       	dec	r24
     2ec:	e9 f7       	brne	.-6      	; 0x2e8 <PWMDrawer_DrawSignal+0xa4>
	GLCD_DisplayString(txt3);
     2ee:	ce 01       	movw	r24, r28
     2f0:	45 96       	adiw	r24, 0x15	; 21
     2f2:	0e 94 5e 05 	call	0xabc	; 0xabc <GLCD_DisplayString>
	GLCD_DisplayInteger(Signal_Data_Ptr->Duty_Percent);
     2f6:	f5 01       	movw	r30, r10
     2f8:	60 81       	ld	r22, Z
     2fa:	70 e0       	ldi	r23, 0x00	; 0
     2fc:	80 e0       	ldi	r24, 0x00	; 0
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	0e 94 6b 05 	call	0xad6	; 0xad6 <GLCD_DisplayInteger>
	char txt4[5] = " %\0";
     304:	80 91 7e 00 	lds	r24, 0x007E	; 0x80007e <__DATA_REGION_ORIGIN__+0x1e>
     308:	90 91 7f 00 	lds	r25, 0x007F	; 0x80007f <__DATA_REGION_ORIGIN__+0x1f>
     30c:	9d a3       	std	Y+37, r25	; 0x25
     30e:	8c a3       	std	Y+36, r24	; 0x24
     310:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__DATA_REGION_ORIGIN__+0x20>
     314:	90 91 81 00 	lds	r25, 0x0081	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
     318:	9f a3       	std	Y+39, r25	; 0x27
     31a:	8e a3       	std	Y+38, r24	; 0x26
     31c:	18 a6       	std	Y+40, r1	; 0x28
	GLCD_DisplayString(txt4);
     31e:	ce 01       	movw	r24, r28
     320:	84 96       	adiw	r24, 0x24	; 36
     322:	0e 94 5e 05 	call	0xabc	; 0xabc <GLCD_DisplayString>

	/* Display Signal Shape */
	GLCD_GoToLine(6);
     326:	86 e0       	ldi	r24, 0x06	; 6
     328:	0e 94 0d 06 	call	0xc1a	; 0xc1a <GLCD_GoToLine>
	uint8 pixel_width_count = 0;
     32c:	10 e0       	ldi	r17, 0x00	; 0
	uint8 i;
	while (pixel_width_count < GLCD_MAX_LINE_PIXEL_WIDTH - 8U) {
     32e:	4e c0       	rjmp	.+156    	; 0x3cc <PWMDrawer_DrawSignal+0x188>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
     330:	20 e4       	ldi	r18, 0x40	; 64
     332:	30 e4       	ldi	r19, 0x40	; 64
     334:	4e e7       	ldi	r20, 0x7E	; 126
     336:	52 e0       	ldi	r21, 0x02	; 2
     338:	62 e0       	ldi	r22, 0x02	; 2
     33a:	70 e0       	ldi	r23, 0x00	; 0
     33c:	80 e0       	ldi	r24, 0x00	; 0
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     344:	1b 5f       	subi	r17, 0xFB	; 251
		for (i = 0; i < ((uint8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
     346:	00 e0       	ldi	r16, 0x00	; 0
     348:	0c c0       	rjmp	.+24     	; 0x362 <PWMDrawer_DrawSignal+0x11e>
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
     34a:	22 e0       	ldi	r18, 0x02	; 2
     34c:	32 e0       	ldi	r19, 0x02	; 2
     34e:	42 e0       	ldi	r20, 0x02	; 2
     350:	52 e0       	ldi	r21, 0x02	; 2
     352:	62 e0       	ldi	r22, 0x02	; 2
     354:	70 e0       	ldi	r23, 0x00	; 0
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     35e:	1b 5f       	subi	r17, 0xFB	; 251
	GLCD_GoToLine(6);
	uint8 pixel_width_count = 0;
	uint8 i;
	while (pixel_width_count < GLCD_MAX_LINE_PIXEL_WIDTH - 8U) {
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
		for (i = 0; i < ((uint8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
     360:	0f 5f       	subi	r16, 0xFF	; 255
     362:	d5 01       	movw	r26, r10
     364:	11 96       	adiw	r26, 0x01	; 1
     366:	6d 91       	ld	r22, X+
     368:	7d 91       	ld	r23, X+
     36a:	8d 91       	ld	r24, X+
     36c:	9c 91       	ld	r25, X
     36e:	14 97       	sbiw	r26, 0x04	; 4
     370:	a7 01       	movw	r20, r14
     372:	96 01       	movw	r18, r12
     374:	0e 94 b7 08 	call	0x116e	; 0x116e <__divsf3>
     378:	0e 94 29 09 	call	0x1252	; 0x1252 <__fixunssfsi>
     37c:	06 17       	cp	r16, r22
     37e:	28 f3       	brcs	.-54     	; 0x34a <PWMDrawer_DrawSignal+0x106>
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
		}
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_FALLING_EDGE); pixel_width_count += 5;
     380:	22 e0       	ldi	r18, 0x02	; 2
     382:	32 e0       	ldi	r19, 0x02	; 2
     384:	4e e7       	ldi	r20, 0x7E	; 126
     386:	50 e4       	ldi	r21, 0x40	; 64
     388:	60 e4       	ldi	r22, 0x40	; 64
     38a:	70 e0       	ldi	r23, 0x00	; 0
     38c:	80 e0       	ldi	r24, 0x00	; 0
     38e:	90 e0       	ldi	r25, 0x00	; 0
     390:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     394:	1b 5f       	subi	r17, 0xFB	; 251
		for (i = 0; i < ((uint8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
     396:	00 e0       	ldi	r16, 0x00	; 0
     398:	0c c0       	rjmp	.+24     	; 0x3b2 <PWMDrawer_DrawSignal+0x16e>
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LOW_LINE); pixel_width_count += 5;
     39a:	20 e4       	ldi	r18, 0x40	; 64
     39c:	30 e4       	ldi	r19, 0x40	; 64
     39e:	40 e4       	ldi	r20, 0x40	; 64
     3a0:	50 e4       	ldi	r21, 0x40	; 64
     3a2:	60 e4       	ldi	r22, 0x40	; 64
     3a4:	70 e0       	ldi	r23, 0x00	; 0
     3a6:	80 e0       	ldi	r24, 0x00	; 0
     3a8:	90 e0       	ldi	r25, 0x00	; 0
     3aa:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     3ae:	1b 5f       	subi	r17, 0xFB	; 251
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RISING_EDGE); pixel_width_count += 5;
		for (i = 0; i < ((uint8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_HIGH_LINE); pixel_width_count += 5;
		}
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_FALLING_EDGE); pixel_width_count += 5;
		for (i = 0; i < ((uint8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
     3b0:	0f 5f       	subi	r16, 0xFF	; 255
     3b2:	f5 01       	movw	r30, r10
     3b4:	65 81       	ldd	r22, Z+5	; 0x05
     3b6:	76 81       	ldd	r23, Z+6	; 0x06
     3b8:	87 81       	ldd	r24, Z+7	; 0x07
     3ba:	90 85       	ldd	r25, Z+8	; 0x08
     3bc:	a7 01       	movw	r20, r14
     3be:	96 01       	movw	r18, r12
     3c0:	0e 94 b7 08 	call	0x116e	; 0x116e <__divsf3>
     3c4:	0e 94 29 09 	call	0x1252	; 0x1252 <__fixunssfsi>
     3c8:	06 17       	cp	r16, r22
     3ca:	38 f3       	brcs	.-50     	; 0x39a <PWMDrawer_DrawSignal+0x156>

	/* Display Signal Shape */
	GLCD_GoToLine(6);
	uint8 pixel_width_count = 0;
	uint8 i;
	while (pixel_width_count < GLCD_MAX_LINE_PIXEL_WIDTH - 8U) {
     3cc:	18 37       	cpi	r17, 0x78	; 120
     3ce:	08 f4       	brcc	.+2      	; 0x3d2 <PWMDrawer_DrawSignal+0x18e>
     3d0:	af cf       	rjmp	.-162    	; 0x330 <PWMDrawer_DrawSignal+0xec>
			GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LOW_LINE); pixel_width_count += 5;
		}
	}

	/* Display Arrow for Time Period */
	GLCD_GoToLine(5);
     3d2:	85 e0       	ldi	r24, 0x05	; 5
     3d4:	0e 94 0d 06 	call	0xc1a	; 0xc1a <GLCD_GoToLine>
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
     3d8:	20 e0       	ldi	r18, 0x00	; 0
     3da:	3e e3       	ldi	r19, 0x3E	; 62
     3dc:	48 e0       	ldi	r20, 0x08	; 8
     3de:	5c e1       	ldi	r21, 0x1C	; 28
     3e0:	6a e2       	ldi	r22, 0x2A	; 42
     3e2:	70 e0       	ldi	r23, 0x00	; 0
     3e4:	80 e0       	ldi	r24, 0x00	; 0
     3e6:	90 e0       	ldi	r25, 0x00	; 0
     3e8:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
	for (i = 0; i < ((uint8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
     3ec:	10 e0       	ldi	r17, 0x00	; 0
     3ee:	0b c0       	rjmp	.+22     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
     3f0:	28 e0       	ldi	r18, 0x08	; 8
     3f2:	38 e0       	ldi	r19, 0x08	; 8
     3f4:	48 e0       	ldi	r20, 0x08	; 8
     3f6:	58 e0       	ldi	r21, 0x08	; 8
     3f8:	68 e0       	ldi	r22, 0x08	; 8
     3fa:	70 e0       	ldi	r23, 0x00	; 0
     3fc:	80 e0       	ldi	r24, 0x00	; 0
     3fe:	90 e0       	ldi	r25, 0x00	; 0
     400:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
	}

	/* Display Arrow for Time Period */
	GLCD_GoToLine(5);
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
	for (i = 0; i < ((uint8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
     404:	1f 5f       	subi	r17, 0xFF	; 255
     406:	d5 01       	movw	r26, r10
     408:	11 96       	adiw	r26, 0x01	; 1
     40a:	6d 91       	ld	r22, X+
     40c:	7d 91       	ld	r23, X+
     40e:	8d 91       	ld	r24, X+
     410:	9c 91       	ld	r25, X
     412:	14 97       	sbiw	r26, 0x04	; 4
     414:	a7 01       	movw	r20, r14
     416:	96 01       	movw	r18, r12
     418:	0e 94 b7 08 	call	0x116e	; 0x116e <__divsf3>
     41c:	0e 94 29 09 	call	0x1252	; 0x1252 <__fixunssfsi>
     420:	16 17       	cp	r17, r22
     422:	30 f3       	brcs	.-52     	; 0x3f0 <PWMDrawer_DrawSignal+0x1ac>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	}
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
     424:	28 e0       	ldi	r18, 0x08	; 8
     426:	38 e0       	ldi	r19, 0x08	; 8
     428:	48 e0       	ldi	r20, 0x08	; 8
     42a:	58 e0       	ldi	r21, 0x08	; 8
     42c:	68 e0       	ldi	r22, 0x08	; 8
     42e:	70 e0       	ldi	r23, 0x00	; 0
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
	for (i = 0; i < ((uint8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
     438:	10 e0       	ldi	r17, 0x00	; 0
     43a:	0b c0       	rjmp	.+22     	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
     43c:	28 e0       	ldi	r18, 0x08	; 8
     43e:	38 e0       	ldi	r19, 0x08	; 8
     440:	48 e0       	ldi	r20, 0x08	; 8
     442:	58 e0       	ldi	r21, 0x08	; 8
     444:	68 e0       	ldi	r22, 0x08	; 8
     446:	70 e0       	ldi	r23, 0x00	; 0
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	90 e0       	ldi	r25, 0x00	; 0
     44c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_LEFT_ARROW_HEAD);
	for (i = 0; i < ((uint8)(Signal_Data_Ptr->High_Time_ms / Scale_ms)); i++) {
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	}
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	for (i = 0; i < ((uint8)(Signal_Data_Ptr->Low_Time_ms / Scale_ms)); i++) {
     450:	1f 5f       	subi	r17, 0xFF	; 255
     452:	f5 01       	movw	r30, r10
     454:	65 81       	ldd	r22, Z+5	; 0x05
     456:	76 81       	ldd	r23, Z+6	; 0x06
     458:	87 81       	ldd	r24, Z+7	; 0x07
     45a:	90 85       	ldd	r25, Z+8	; 0x08
     45c:	a7 01       	movw	r20, r14
     45e:	96 01       	movw	r18, r12
     460:	0e 94 b7 08 	call	0x116e	; 0x116e <__divsf3>
     464:	0e 94 29 09 	call	0x1252	; 0x1252 <__fixunssfsi>
     468:	16 17       	cp	r17, r22
     46a:	40 f3       	brcs	.-48     	; 0x43c <__EEPROM_REGION_LENGTH__+0x3c>
		GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_ARROW_MIDDLE_BODY);
	}
	GLCD_DisplaySpecialPattern(PWM_DRAWER_GLCD_RIGHT_ARROW_HEAD);
     46c:	2a e2       	ldi	r18, 0x2A	; 42
     46e:	3c e1       	ldi	r19, 0x1C	; 28
     470:	48 e0       	ldi	r20, 0x08	; 8
     472:	5e e3       	ldi	r21, 0x3E	; 62
     474:	60 e0       	ldi	r22, 0x00	; 0
     476:	70 e0       	ldi	r23, 0x00	; 0
     478:	80 e0       	ldi	r24, 0x00	; 0
     47a:	90 e0       	ldi	r25, 0x00	; 0
     47c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>

	/* Display Time Period Value */
	GLCD_GoToLine(4);
     480:	84 e0       	ldi	r24, 0x04	; 4
     482:	0e 94 0d 06 	call	0xc1a	; 0xc1a <GLCD_GoToLine>
	char txt5[15] = " Time=\0";
     486:	88 e0       	ldi	r24, 0x08	; 8
     488:	e3 e8       	ldi	r30, 0x83	; 131
     48a:	f0 e0       	ldi	r31, 0x00	; 0
     48c:	de 01       	movw	r26, r28
     48e:	99 96       	adiw	r26, 0x29	; 41
     490:	01 90       	ld	r0, Z+
     492:	0d 92       	st	X+, r0
     494:	8a 95       	dec	r24
     496:	e1 f7       	brne	.-8      	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
     498:	fe 01       	movw	r30, r28
     49a:	f1 96       	adiw	r30, 0x31	; 49
     49c:	87 e0       	ldi	r24, 0x07	; 7
     49e:	df 01       	movw	r26, r30
     4a0:	1d 92       	st	X+, r1
     4a2:	8a 95       	dec	r24
     4a4:	e9 f7       	brne	.-6      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
	GLCD_DisplayString(txt5);
     4a6:	ce 01       	movw	r24, r28
     4a8:	89 96       	adiw	r24, 0x29	; 41
     4aa:	0e 94 5e 05 	call	0xabc	; 0xabc <GLCD_DisplayString>
	GLCD_DisplayFloatingPoint(Signal_Data_Ptr->Period_Time_ms);
     4ae:	f5 01       	movw	r30, r10
     4b0:	61 85       	ldd	r22, Z+9	; 0x09
     4b2:	72 85       	ldd	r23, Z+10	; 0x0a
     4b4:	83 85       	ldd	r24, Z+11	; 0x0b
     4b6:	94 85       	ldd	r25, Z+12	; 0x0c
     4b8:	0e 94 c0 05 	call	0xb80	; 0xb80 <GLCD_DisplayFloatingPoint>
	char txt6[5] = " ms\0";
     4bc:	85 e0       	ldi	r24, 0x05	; 5
     4be:	e2 e9       	ldi	r30, 0x92	; 146
     4c0:	f0 e0       	ldi	r31, 0x00	; 0
     4c2:	de 01       	movw	r26, r28
     4c4:	d8 96       	adiw	r26, 0x38	; 56
     4c6:	01 90       	ld	r0, Z+
     4c8:	0d 92       	st	X+, r0
     4ca:	8a 95       	dec	r24
     4cc:	e1 f7       	brne	.-8      	; 0x4c6 <__EEPROM_REGION_LENGTH__+0xc6>
	GLCD_DisplayString(txt6);
     4ce:	ce 01       	movw	r24, r28
     4d0:	c8 96       	adiw	r24, 0x38	; 56
     4d2:	0e 94 5e 05 	call	0xabc	; 0xabc <GLCD_DisplayString>
     4d6:	ec 96       	adiw	r28, 0x3c	; 60
     4d8:	0f b6       	in	r0, 0x3f	; 63
     4da:	f8 94       	cli
     4dc:	de bf       	out	0x3e, r29	; 62
     4de:	0f be       	out	0x3f, r0	; 63
     4e0:	cd bf       	out	0x3d, r28	; 61
     4e2:	df 91       	pop	r29
     4e4:	cf 91       	pop	r28
     4e6:	1f 91       	pop	r17
     4e8:	0f 91       	pop	r16
     4ea:	ff 90       	pop	r15
     4ec:	ef 90       	pop	r14
     4ee:	df 90       	pop	r13
     4f0:	cf 90       	pop	r12
     4f2:	bf 90       	pop	r11
     4f4:	af 90       	pop	r10
     4f6:	08 95       	ret

000004f8 <main>:
#include "main.h"

#include <util/delay.h>

int main(void)
{
     4f8:	cf 93       	push	r28
     4fa:	df 93       	push	r29
     4fc:	cd b7       	in	r28, 0x3d	; 61
     4fe:	de b7       	in	r29, 0x3e	; 62
     500:	61 97       	sbiw	r28, 0x11	; 17
     502:	0f b6       	in	r0, 0x3f	; 63
     504:	f8 94       	cli
     506:	de bf       	out	0x3e, r29	; 62
     508:	0f be       	out	0x3f, r0	; 63
     50a:	cd bf       	out	0x3d, r28	; 61
	PWMDrawer_Init();
     50c:	0e 94 a4 00 	call	0x148	; 0x148 <PWMDrawer_Init>
	PWMDrawer_SignalAttributesType Signal_Data = {0, 0, 0, 0, 0};
     510:	fe 01       	movw	r30, r28
     512:	31 96       	adiw	r30, 0x01	; 1
     514:	81 e1       	ldi	r24, 0x11	; 17
     516:	df 01       	movw	r26, r30
     518:	1d 92       	st	X+, r1
     51a:	8a 95       	dec	r24
     51c:	e9 f7       	brne	.-6      	; 0x518 <main+0x20>
	float32 Scale_ms = 0.25;
	while(1)
	{
		//TODO:: Please write your application code
		PWMDrawer_MeasureSignal(&Signal_Data);
     51e:	ce 01       	movw	r24, r28
     520:	01 96       	adiw	r24, 0x01	; 1
     522:	0e 94 b1 00 	call	0x162	; 0x162 <PWMDrawer_MeasureSignal>
		Scale_ms = (Signal_Data.Period_Time_ms) / 5;
     526:	6a 85       	ldd	r22, Y+10	; 0x0a
     528:	7b 85       	ldd	r23, Y+11	; 0x0b
     52a:	8c 85       	ldd	r24, Y+12	; 0x0c
     52c:	9d 85       	ldd	r25, Y+13	; 0x0d
     52e:	20 e0       	ldi	r18, 0x00	; 0
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	40 ea       	ldi	r20, 0xA0	; 160
     534:	50 e4       	ldi	r21, 0x40	; 64
     536:	0e 94 b7 08 	call	0x116e	; 0x116e <__divsf3>
     53a:	ab 01       	movw	r20, r22
     53c:	bc 01       	movw	r22, r24
		PWMDrawer_DrawSignal(&Signal_Data, Scale_ms);
     53e:	ce 01       	movw	r24, r28
     540:	01 96       	adiw	r24, 0x01	; 1
     542:	0e 94 22 01 	call	0x244	; 0x244 <PWMDrawer_DrawSignal>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     546:	bf ef       	ldi	r27, 0xFF	; 255
     548:	21 ee       	ldi	r18, 0xE1	; 225
     54a:	84 e0       	ldi	r24, 0x04	; 4
     54c:	b1 50       	subi	r27, 0x01	; 1
     54e:	20 40       	sbci	r18, 0x00	; 0
     550:	80 40       	sbci	r24, 0x00	; 0
     552:	e1 f7       	brne	.-8      	; 0x54c <main+0x54>
     554:	00 c0       	rjmp	.+0      	; 0x556 <main+0x5e>
     556:	00 00       	nop
     558:	e2 cf       	rjmp	.-60     	; 0x51e <main+0x26>

0000055a <GLCD_SelectPage>:
	GLCD_SelectPage(GLCD_PAGE_0);
	Current_Page = 0;
}

void GLCD_SelectPage(GLCD_SelectSide Side) {
	switch (Side) {
     55a:	81 30       	cpi	r24, 0x01	; 1
     55c:	89 f0       	breq	.+34     	; 0x580 <GLCD_SelectPage+0x26>
     55e:	28 f0       	brcs	.+10     	; 0x56a <GLCD_SelectPage+0x10>
     560:	82 30       	cpi	r24, 0x02	; 2
     562:	c9 f0       	breq	.+50     	; 0x596 <GLCD_SelectPage+0x3c>
     564:	83 30       	cpi	r24, 0x03	; 3
     566:	11 f1       	breq	.+68     	; 0x5ac <GLCD_SelectPage+0x52>
     568:	08 95       	ret
		case GLCD_NO_SIDES:
		DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_LOW);
     56a:	40 e0       	ldi	r20, 0x00	; 0
     56c:	64 e0       	ldi	r22, 0x04	; 4
     56e:	81 e0       	ldi	r24, 0x01	; 1
     570:	0e 94 c1 06 	call	0xd82	; 0xd82 <DIO_WritePin>
		DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_LOW);
     574:	40 e0       	ldi	r20, 0x00	; 0
     576:	65 e0       	ldi	r22, 0x05	; 5
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	0e 94 c1 06 	call	0xd82	; 0xd82 <DIO_WritePin>
		break;
     57e:	08 95       	ret
		case GLCD_PAGE_0:
		DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_HIGH);
     580:	41 e0       	ldi	r20, 0x01	; 1
     582:	64 e0       	ldi	r22, 0x04	; 4
     584:	81 e0       	ldi	r24, 0x01	; 1
     586:	0e 94 c1 06 	call	0xd82	; 0xd82 <DIO_WritePin>
		DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_LOW);
     58a:	40 e0       	ldi	r20, 0x00	; 0
     58c:	65 e0       	ldi	r22, 0x05	; 5
     58e:	81 e0       	ldi	r24, 0x01	; 1
     590:	0e 94 c1 06 	call	0xd82	; 0xd82 <DIO_WritePin>
		break;
     594:	08 95       	ret
		case GLCD_PAGE_1:
		DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_LOW);
     596:	40 e0       	ldi	r20, 0x00	; 0
     598:	64 e0       	ldi	r22, 0x04	; 4
     59a:	81 e0       	ldi	r24, 0x01	; 1
     59c:	0e 94 c1 06 	call	0xd82	; 0xd82 <DIO_WritePin>
		DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_HIGH);
     5a0:	41 e0       	ldi	r20, 0x01	; 1
     5a2:	65 e0       	ldi	r22, 0x05	; 5
     5a4:	81 e0       	ldi	r24, 0x01	; 1
     5a6:	0e 94 c1 06 	call	0xd82	; 0xd82 <DIO_WritePin>
		break;
     5aa:	08 95       	ret
		case GLCD_BOTH_SIDES:
		DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_HIGH);
     5ac:	41 e0       	ldi	r20, 0x01	; 1
     5ae:	64 e0       	ldi	r22, 0x04	; 4
     5b0:	81 e0       	ldi	r24, 0x01	; 1
     5b2:	0e 94 c1 06 	call	0xd82	; 0xd82 <DIO_WritePin>
		DIO_WritePin(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_HIGH);
     5b6:	41 e0       	ldi	r20, 0x01	; 1
     5b8:	65 e0       	ldi	r22, 0x05	; 5
     5ba:	81 e0       	ldi	r24, 0x01	; 1
     5bc:	0e 94 c1 06 	call	0xd82	; 0xd82 <DIO_WritePin>
     5c0:	08 95       	ret

000005c2 <GLCD_SendInstruction>:
		break;
		default: break;
	}
}

void GLCD_SendInstruction(GLCD_CommandWord Instruction) {
     5c2:	cf 93       	push	r28
     5c4:	c8 2f       	mov	r28, r24
	/* Select Instruction Register */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RS_PIN, GLCD_INSTRUCTION_REG);
     5c6:	40 e0       	ldi	r20, 0x00	; 0
     5c8:	62 e0       	ldi	r22, 0x02	; 2
     5ca:	81 e0       	ldi	r24, 0x01	; 1
     5cc:	0e 94 c1 06 	call	0xd82	; 0xd82 <DIO_WritePin>
	/* Select Write Operation */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RW_PIN, GLCD_WMODE);
     5d0:	40 e0       	ldi	r20, 0x00	; 0
     5d2:	61 e0       	ldi	r22, 0x01	; 1
     5d4:	81 e0       	ldi	r24, 0x01	; 1
     5d6:	0e 94 c1 06 	call	0xd82	; 0xd82 <DIO_WritePin>
	/* Send Command on Data Pins */
	DIO_WritePort(GLCD_DATA_PORT, Instruction);
     5da:	6c 2f       	mov	r22, r28
     5dc:	80 e0       	ldi	r24, 0x00	; 0
     5de:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <DIO_WritePort>
	/* Enable Pulse of min. width 1us */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_HIGH);
     5e2:	41 e0       	ldi	r20, 0x01	; 1
     5e4:	60 e0       	ldi	r22, 0x00	; 0
     5e6:	81 e0       	ldi	r24, 0x01	; 1
     5e8:	0e 94 c1 06 	call	0xd82	; 0xd82 <DIO_WritePin>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5ec:	8a e1       	ldi	r24, 0x1A	; 26
     5ee:	8a 95       	dec	r24
     5f0:	f1 f7       	brne	.-4      	; 0x5ee <GLCD_SendInstruction+0x2c>
     5f2:	00 c0       	rjmp	.+0      	; 0x5f4 <GLCD_SendInstruction+0x32>
	_delay_us(5);
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_LOW);
     5f4:	40 e0       	ldi	r20, 0x00	; 0
     5f6:	60 e0       	ldi	r22, 0x00	; 0
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	0e 94 c1 06 	call	0xd82	; 0xd82 <DIO_WritePin>
}
     5fe:	cf 91       	pop	r28
     600:	08 95       	ret

00000602 <GLCD_Init>:
void GLCD_Init(void) {



	/* Initialize Port Directions */
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_OUTPUT);
     602:	41 e0       	ldi	r20, 0x01	; 1
     604:	60 e0       	ldi	r22, 0x00	; 0
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_SetPinDirection>
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_RS_PIN, DIO_OUTPUT);
     60c:	41 e0       	ldi	r20, 0x01	; 1
     60e:	62 e0       	ldi	r22, 0x02	; 2
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_SetPinDirection>
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_RW_PIN, DIO_OUTPUT);
     616:	41 e0       	ldi	r20, 0x01	; 1
     618:	61 e0       	ldi	r22, 0x01	; 1
     61a:	81 e0       	ldi	r24, 0x01	; 1
     61c:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_SetPinDirection>
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_OUTPUT);
     620:	41 e0       	ldi	r20, 0x01	; 1
     622:	66 e0       	ldi	r22, 0x06	; 6
     624:	81 e0       	ldi	r24, 0x01	; 1
     626:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_SetPinDirection>
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_1, DIO_OUTPUT);
     62a:	41 e0       	ldi	r20, 0x01	; 1
     62c:	64 e0       	ldi	r22, 0x04	; 4
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_SetPinDirection>
	DIO_SetPinDirection(GLCD_CTRL_PORT, GLCD_PAGE_SELECT_PIN_2, DIO_OUTPUT);
     634:	41 e0       	ldi	r20, 0x01	; 1
     636:	65 e0       	ldi	r22, 0x05	; 5
     638:	81 e0       	ldi	r24, 0x01	; 1
     63a:	0e 94 9a 06 	call	0xd34	; 0xd34 <DIO_SetPinDirection>

	DIO_SetPortDirection(GLCD_DATA_PORT, DIO_OUTPUT);
     63e:	61 e0       	ldi	r22, 0x01	; 1
     640:	80 e0       	ldi	r24, 0x00	; 0
     642:	0e 94 e8 06 	call	0xdd0	; 0xdd0 <DIO_SetPortDirection>
	/* Keep reset pin inactive (high) */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_HIGH);
     646:	41 e0       	ldi	r20, 0x01	; 1
     648:	66 e0       	ldi	r22, 0x06	; 6
     64a:	81 e0       	ldi	r24, 0x01	; 1
     64c:	0e 94 c1 06 	call	0xd82	; 0xd82 <DIO_WritePin>
	/* Initialization of GLCD Sequence */
	GLCD_SelectPage(GLCD_BOTH_SIDES);
     650:	83 e0       	ldi	r24, 0x03	; 3
     652:	0e 94 ad 02 	call	0x55a	; 0x55a <GLCD_SelectPage>
	GLCD_SendInstruction(GLCD_DISP_OFF);
     656:	8e e3       	ldi	r24, 0x3E	; 62
     658:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <GLCD_SendInstruction>
	GLCD_SendInstruction(GLCD_SETX + 0);  /* line=0 */
     65c:	88 eb       	ldi	r24, 0xB8	; 184
     65e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <GLCD_SendInstruction>
	Current_X = 0;
     662:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <Current_X>
	GLCD_SendInstruction(GLCD_SETY + 0);  /* column=0 */
     666:	80 e4       	ldi	r24, 0x40	; 64
     668:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <GLCD_SendInstruction>
	Current_Y = 0;
     66c:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <Current_Y>
	GLCD_SendInstruction(GLCD_SETZ + 0);  /* start_line=0 */
     670:	80 ec       	ldi	r24, 0xC0	; 192
     672:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <GLCD_SendInstruction>
	GLCD_SendInstruction(GLCD_DISP_ON);
     676:	8f e3       	ldi	r24, 0x3F	; 63
     678:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <GLCD_SendInstruction>
	GLCD_SelectPage(GLCD_PAGE_0);
     67c:	81 e0       	ldi	r24, 0x01	; 1
     67e:	0e 94 ad 02 	call	0x55a	; 0x55a <GLCD_SelectPage>
	Current_Page = 0;
     682:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__data_end>
     686:	08 95       	ret

00000688 <GLCD_SendData>:
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_HIGH);
	_delay_us(5);
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_LOW);
}

void GLCD_SendData(uint8 Data) {
     688:	cf 93       	push	r28
     68a:	c8 2f       	mov	r28, r24
	/* Select Data Register */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RS_PIN, GLCD_DATA_REG);
     68c:	41 e0       	ldi	r20, 0x01	; 1
     68e:	62 e0       	ldi	r22, 0x02	; 2
     690:	81 e0       	ldi	r24, 0x01	; 1
     692:	0e 94 c1 06 	call	0xd82	; 0xd82 <DIO_WritePin>
	/* Select Write Operation */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RW_PIN, GLCD_WMODE);
     696:	40 e0       	ldi	r20, 0x00	; 0
     698:	61 e0       	ldi	r22, 0x01	; 1
     69a:	81 e0       	ldi	r24, 0x01	; 1
     69c:	0e 94 c1 06 	call	0xd82	; 0xd82 <DIO_WritePin>
	/* Send Command on Data Pins */
	DIO_WritePort(GLCD_DATA_PORT, Data);
     6a0:	6c 2f       	mov	r22, r28
     6a2:	80 e0       	ldi	r24, 0x00	; 0
     6a4:	0e 94 fa 06 	call	0xdf4	; 0xdf4 <DIO_WritePort>
	/* Enable Pulse of min. width 1us */
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_HIGH);
     6a8:	41 e0       	ldi	r20, 0x01	; 1
     6aa:	60 e0       	ldi	r22, 0x00	; 0
     6ac:	81 e0       	ldi	r24, 0x01	; 1
     6ae:	0e 94 c1 06 	call	0xd82	; 0xd82 <DIO_WritePin>
     6b2:	8a e1       	ldi	r24, 0x1A	; 26
     6b4:	8a 95       	dec	r24
     6b6:	f1 f7       	brne	.-4      	; 0x6b4 <GLCD_SendData+0x2c>
     6b8:	00 c0       	rjmp	.+0      	; 0x6ba <GLCD_SendData+0x32>
	_delay_us(5);
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_ENABLE_PIN, DIO_LOW);
     6ba:	40 e0       	ldi	r20, 0x00	; 0
     6bc:	60 e0       	ldi	r22, 0x00	; 0
     6be:	81 e0       	ldi	r24, 0x01	; 1
     6c0:	0e 94 c1 06 	call	0xd82	; 0xd82 <DIO_WritePin>
}
     6c4:	cf 91       	pop	r28
     6c6:	08 95       	ret

000006c8 <GLCD_Reset>:

void GLCD_Reset(void) {
	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_LOW);
     6c8:	40 e0       	ldi	r20, 0x00	; 0
     6ca:	66 e0       	ldi	r22, 0x06	; 6
     6cc:	81 e0       	ldi	r24, 0x01	; 1
     6ce:	0e 94 c1 06 	call	0xd82	; 0xd82 <DIO_WritePin>
     6d2:	85 e3       	ldi	r24, 0x35	; 53
     6d4:	8a 95       	dec	r24
     6d6:	f1 f7       	brne	.-4      	; 0x6d4 <GLCD_Reset+0xc>
     6d8:	00 00       	nop
	_delay_us(10);

	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_HIGH);
     6da:	41 e0       	ldi	r20, 0x01	; 1
     6dc:	66 e0       	ldi	r22, 0x06	; 6
     6de:	81 e0       	ldi	r24, 0x01	; 1
     6e0:	0e 94 c1 06 	call	0xd82	; 0xd82 <DIO_WritePin>
     6e4:	08 95       	ret

000006e6 <GLCD_DisplaySpecialPattern>:
}

void GLCD_DisplaySpecialPattern(uint64 Pattern) {
     6e6:	9f 92       	push	r9
     6e8:	af 92       	push	r10
     6ea:	bf 92       	push	r11
     6ec:	cf 92       	push	r12
     6ee:	df 92       	push	r13
     6f0:	ef 92       	push	r14
     6f2:	ff 92       	push	r15
     6f4:	0f 93       	push	r16
     6f6:	1f 93       	push	r17
     6f8:	cf 93       	push	r28
     6fa:	df 93       	push	r29
     6fc:	92 2e       	mov	r9, r18
     6fe:	a3 2e       	mov	r10, r19
     700:	b4 2e       	mov	r11, r20
     702:	c5 2e       	mov	r12, r21
     704:	d6 2e       	mov	r13, r22
     706:	e7 2e       	mov	r14, r23
     708:	f8 2e       	mov	r15, r24
     70a:	d9 2f       	mov	r29, r25
	for(uint8 i = 0; i < 5; i++) {
     70c:	c0 e0       	ldi	r28, 0x00	; 0
     70e:	30 c0       	rjmp	.+96     	; 0x770 <GLCD_DisplaySpecialPattern+0x8a>
		GLCD_SendInstruction(GLCD_SETX + Current_X);
     710:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <Current_X>
     714:	88 54       	subi	r24, 0x48	; 72
     716:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <GLCD_SendInstruction>
		GLCD_SendInstruction(GLCD_SETY + Current_Y);
     71a:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <Current_Y>
     71e:	80 5c       	subi	r24, 0xC0	; 192
     720:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <GLCD_SendInstruction>
		GLCD_SendData((Pattern>>(i*8U)) & 0x00000000FFUL);
     724:	0c 2f       	mov	r16, r28
     726:	10 e0       	ldi	r17, 0x00	; 0
     728:	00 0f       	add	r16, r16
     72a:	11 1f       	adc	r17, r17
     72c:	00 0f       	add	r16, r16
     72e:	11 1f       	adc	r17, r17
     730:	00 0f       	add	r16, r16
     732:	11 1f       	adc	r17, r17
     734:	29 2d       	mov	r18, r9
     736:	3a 2d       	mov	r19, r10
     738:	4b 2d       	mov	r20, r11
     73a:	5c 2d       	mov	r21, r12
     73c:	6d 2d       	mov	r22, r13
     73e:	7e 2d       	mov	r23, r14
     740:	8f 2d       	mov	r24, r15
     742:	9d 2f       	mov	r25, r29
     744:	0e 94 95 0a 	call	0x152a	; 0x152a <__lshrdi3>
     748:	82 2f       	mov	r24, r18
     74a:	0e 94 44 03 	call	0x688	; 0x688 <GLCD_SendData>
		Current_Y++;
     74e:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <Current_Y>
     752:	8f 5f       	subi	r24, 0xFF	; 255
     754:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <Current_Y>
		if (Current_Y >= GLCD_MAX_PAGE_PIXEL_WIDTH && Current_Page == 0) {
     758:	80 34       	cpi	r24, 0x40	; 64
     75a:	48 f0       	brcs	.+18     	; 0x76e <GLCD_DisplaySpecialPattern+0x88>
     75c:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__data_end>
     760:	81 11       	cpse	r24, r1
     762:	05 c0       	rjmp	.+10     	; 0x76e <GLCD_DisplaySpecialPattern+0x88>
			GLCD_SelectPage(GLCD_PAGE_1);
     764:	82 e0       	ldi	r24, 0x02	; 2
     766:	0e 94 ad 02 	call	0x55a	; 0x55a <GLCD_SelectPage>
			Current_Y = 0;
     76a:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <Current_Y>

	DIO_WritePin(GLCD_CTRL_PORT, GLCD_RESET_PIN, DIO_HIGH);
}

void GLCD_DisplaySpecialPattern(uint64 Pattern) {
	for(uint8 i = 0; i < 5; i++) {
     76e:	cf 5f       	subi	r28, 0xFF	; 255
     770:	c5 30       	cpi	r28, 0x05	; 5
     772:	70 f2       	brcs	.-100    	; 0x710 <GLCD_DisplaySpecialPattern+0x2a>
		if (Current_Y >= GLCD_MAX_PAGE_PIXEL_WIDTH && Current_Page == 0) {
			GLCD_SelectPage(GLCD_PAGE_1);
			Current_Y = 0;
		}
	}
}
     774:	df 91       	pop	r29
     776:	cf 91       	pop	r28
     778:	1f 91       	pop	r17
     77a:	0f 91       	pop	r16
     77c:	ff 90       	pop	r15
     77e:	ef 90       	pop	r14
     780:	df 90       	pop	r13
     782:	cf 90       	pop	r12
     784:	bf 90       	pop	r11
     786:	af 90       	pop	r10
     788:	9f 90       	pop	r9
     78a:	08 95       	ret

0000078c <GLCD_DisplayCharacter>:

void GLCD_DisplayCharacter(char Data) {
     78c:	e8 2f       	mov	r30, r24
	if ((Current_Page == 0) | (Current_Y < GLCD_MAX_PAGE_PIXEL_WIDTH - 7U)) {
     78e:	91 e0       	ldi	r25, 0x01	; 1
     790:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__data_end>
     794:	81 11       	cpse	r24, r1
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	81 e0       	ldi	r24, 0x01	; 1
     79a:	20 91 ab 00 	lds	r18, 0x00AB	; 0x8000ab <Current_Y>
     79e:	29 33       	cpi	r18, 0x39	; 57
     7a0:	08 f0       	brcs	.+2      	; 0x7a4 <GLCD_DisplayCharacter+0x18>
     7a2:	80 e0       	ldi	r24, 0x00	; 0
     7a4:	89 2b       	or	r24, r25
     7a6:	09 f4       	brne	.+2      	; 0x7aa <GLCD_DisplayCharacter+0x1e>
     7a8:	88 c1       	rjmp	.+784    	; 0xaba <__stack+0x25b>
		/* Enough space to write character */
		switch (Data) {
     7aa:	8e 2f       	mov	r24, r30
     7ac:	90 e0       	ldi	r25, 0x00	; 0
     7ae:	fc 01       	movw	r30, r24
     7b0:	b0 97       	sbiw	r30, 0x20	; 32
     7b2:	eb 35       	cpi	r30, 0x5B	; 91
     7b4:	f1 05       	cpc	r31, r1
     7b6:	08 f0       	brcs	.+2      	; 0x7ba <GLCD_DisplayCharacter+0x2e>
     7b8:	63 c1       	rjmp	.+710    	; 0xa80 <__stack+0x221>
     7ba:	e6 5d       	subi	r30, 0xD6	; 214
     7bc:	ff 4f       	sbci	r31, 0xFF	; 255
     7be:	0c 94 82 0a 	jmp	0x1504	; 0x1504 <__tablejump2__>
			case 'A': case 'a': GLCD_DisplaySpecialPattern(GLCD_CHAR_A); break;
     7c2:	2c e7       	ldi	r18, 0x7C	; 124
     7c4:	32 e1       	ldi	r19, 0x12	; 18
     7c6:	41 e1       	ldi	r20, 0x11	; 17
     7c8:	52 e1       	ldi	r21, 0x12	; 18
     7ca:	6c e7       	ldi	r22, 0x7C	; 124
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	80 e0       	ldi	r24, 0x00	; 0
     7d0:	90 e0       	ldi	r25, 0x00	; 0
     7d2:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     7d6:	54 c1       	rjmp	.+680    	; 0xa80 <__stack+0x221>
			case 'F': case 'f': GLCD_DisplaySpecialPattern(GLCD_CHAR_F); break;
     7d8:	2f e7       	ldi	r18, 0x7F	; 127
     7da:	39 e0       	ldi	r19, 0x09	; 9
     7dc:	49 e0       	ldi	r20, 0x09	; 9
     7de:	59 e0       	ldi	r21, 0x09	; 9
     7e0:	61 e0       	ldi	r22, 0x01	; 1
     7e2:	70 e0       	ldi	r23, 0x00	; 0
     7e4:	80 e0       	ldi	r24, 0x00	; 0
     7e6:	90 e0       	ldi	r25, 0x00	; 0
     7e8:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     7ec:	49 c1       	rjmp	.+658    	; 0xa80 <__stack+0x221>
			case 'R': case 'r': GLCD_DisplaySpecialPattern(GLCD_CHAR_R); break;
     7ee:	2f e7       	ldi	r18, 0x7F	; 127
     7f0:	39 e0       	ldi	r19, 0x09	; 9
     7f2:	49 e1       	ldi	r20, 0x19	; 25
     7f4:	59 e2       	ldi	r21, 0x29	; 41
     7f6:	6f e4       	ldi	r22, 0x4F	; 79
     7f8:	70 e0       	ldi	r23, 0x00	; 0
     7fa:	80 e0       	ldi	r24, 0x00	; 0
     7fc:	90 e0       	ldi	r25, 0x00	; 0
     7fe:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     802:	3e c1       	rjmp	.+636    	; 0xa80 <__stack+0x221>
			case 'E': case 'e': GLCD_DisplaySpecialPattern(GLCD_CHAR_E); break;
     804:	2f e7       	ldi	r18, 0x7F	; 127
     806:	39 e4       	ldi	r19, 0x49	; 73
     808:	49 e4       	ldi	r20, 0x49	; 73
     80a:	59 e4       	ldi	r21, 0x49	; 73
     80c:	61 e4       	ldi	r22, 0x41	; 65
     80e:	70 e0       	ldi	r23, 0x00	; 0
     810:	80 e0       	ldi	r24, 0x00	; 0
     812:	90 e0       	ldi	r25, 0x00	; 0
     814:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     818:	33 c1       	rjmp	.+614    	; 0xa80 <__stack+0x221>
			case 'Q': case 'q': GLCD_DisplaySpecialPattern(GLCD_CHAR_Q); break;
     81a:	2e e1       	ldi	r18, 0x1E	; 30
     81c:	31 e2       	ldi	r19, 0x21	; 33
     81e:	41 e3       	ldi	r20, 0x31	; 49
     820:	5e e3       	ldi	r21, 0x3E	; 62
     822:	60 e4       	ldi	r22, 0x40	; 64
     824:	70 e0       	ldi	r23, 0x00	; 0
     826:	80 e0       	ldi	r24, 0x00	; 0
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     82e:	28 c1       	rjmp	.+592    	; 0xa80 <__stack+0x221>
			case 'U': case 'u': GLCD_DisplaySpecialPattern(GLCD_CHAR_U); break;
     830:	2f e3       	ldi	r18, 0x3F	; 63
     832:	30 e4       	ldi	r19, 0x40	; 64
     834:	40 e4       	ldi	r20, 0x40	; 64
     836:	50 e4       	ldi	r21, 0x40	; 64
     838:	6f e3       	ldi	r22, 0x3F	; 63
     83a:	70 e0       	ldi	r23, 0x00	; 0
     83c:	80 e0       	ldi	r24, 0x00	; 0
     83e:	90 e0       	ldi	r25, 0x00	; 0
     840:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     844:	1d c1       	rjmp	.+570    	; 0xa80 <__stack+0x221>
			case 'N': case 'n': GLCD_DisplaySpecialPattern(GLCD_CHAR_N); break;
     846:	2f e7       	ldi	r18, 0x7F	; 127
     848:	32 e0       	ldi	r19, 0x02	; 2
     84a:	4c e1       	ldi	r20, 0x1C	; 28
     84c:	50 e2       	ldi	r21, 0x20	; 32
     84e:	6f e7       	ldi	r22, 0x7F	; 127
     850:	70 e0       	ldi	r23, 0x00	; 0
     852:	80 e0       	ldi	r24, 0x00	; 0
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     85a:	12 c1       	rjmp	.+548    	; 0xa80 <__stack+0x221>
			case 'C': case 'c': GLCD_DisplaySpecialPattern(GLCD_CHAR_C); break;
     85c:	2e e3       	ldi	r18, 0x3E	; 62
     85e:	31 e4       	ldi	r19, 0x41	; 65
     860:	41 e4       	ldi	r20, 0x41	; 65
     862:	51 e4       	ldi	r21, 0x41	; 65
     864:	61 e4       	ldi	r22, 0x41	; 65
     866:	70 e0       	ldi	r23, 0x00	; 0
     868:	80 e0       	ldi	r24, 0x00	; 0
     86a:	90 e0       	ldi	r25, 0x00	; 0
     86c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     870:	07 c1       	rjmp	.+526    	; 0xa80 <__stack+0x221>
			case 'Y': case 'y': GLCD_DisplaySpecialPattern(GLCD_CHAR_Y); break;
     872:	23 e0       	ldi	r18, 0x03	; 3
     874:	3c e0       	ldi	r19, 0x0C	; 12
     876:	40 e7       	ldi	r20, 0x70	; 112
     878:	5c e0       	ldi	r21, 0x0C	; 12
     87a:	63 e0       	ldi	r22, 0x03	; 3
     87c:	70 e0       	ldi	r23, 0x00	; 0
     87e:	80 e0       	ldi	r24, 0x00	; 0
     880:	90 e0       	ldi	r25, 0x00	; 0
     882:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     886:	fc c0       	rjmp	.+504    	; 0xa80 <__stack+0x221>
			case 'D': case 'd': GLCD_DisplaySpecialPattern(GLCD_CHAR_D); break;
     888:	2f e7       	ldi	r18, 0x7F	; 127
     88a:	31 e4       	ldi	r19, 0x41	; 65
     88c:	41 e4       	ldi	r20, 0x41	; 65
     88e:	5e e3       	ldi	r21, 0x3E	; 62
     890:	60 e0       	ldi	r22, 0x00	; 0
     892:	70 e0       	ldi	r23, 0x00	; 0
     894:	80 e0       	ldi	r24, 0x00	; 0
     896:	90 e0       	ldi	r25, 0x00	; 0
     898:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     89c:	f1 c0       	rjmp	.+482    	; 0xa80 <__stack+0x221>
			case 'T': case 't': GLCD_DisplaySpecialPattern(GLCD_CHAR_T); break;
     89e:	21 e0       	ldi	r18, 0x01	; 1
     8a0:	31 e0       	ldi	r19, 0x01	; 1
     8a2:	4f e7       	ldi	r20, 0x7F	; 127
     8a4:	51 e0       	ldi	r21, 0x01	; 1
     8a6:	61 e0       	ldi	r22, 0x01	; 1
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	80 e0       	ldi	r24, 0x00	; 0
     8ac:	90 e0       	ldi	r25, 0x00	; 0
     8ae:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     8b2:	e6 c0       	rjmp	.+460    	; 0xa80 <__stack+0x221>
			case 'K': case 'k': GLCD_DisplaySpecialPattern(GLCD_CHAR_K); break;
     8b4:	2f e7       	ldi	r18, 0x7F	; 127
     8b6:	38 e0       	ldi	r19, 0x08	; 8
     8b8:	44 e1       	ldi	r20, 0x14	; 20
     8ba:	52 e2       	ldi	r21, 0x22	; 34
     8bc:	61 e4       	ldi	r22, 0x41	; 65
     8be:	70 e0       	ldi	r23, 0x00	; 0
     8c0:	80 e0       	ldi	r24, 0x00	; 0
     8c2:	90 e0       	ldi	r25, 0x00	; 0
     8c4:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     8c8:	db c0       	rjmp	.+438    	; 0xa80 <__stack+0x221>
			case 'H': case 'h': GLCD_DisplaySpecialPattern(GLCD_CHAR_H); break;
     8ca:	2f e7       	ldi	r18, 0x7F	; 127
     8cc:	38 e0       	ldi	r19, 0x08	; 8
     8ce:	48 e0       	ldi	r20, 0x08	; 8
     8d0:	58 e0       	ldi	r21, 0x08	; 8
     8d2:	6f e7       	ldi	r22, 0x7F	; 127
     8d4:	70 e0       	ldi	r23, 0x00	; 0
     8d6:	80 e0       	ldi	r24, 0x00	; 0
     8d8:	90 e0       	ldi	r25, 0x00	; 0
     8da:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     8de:	d0 c0       	rjmp	.+416    	; 0xa80 <__stack+0x221>
			case 'Z': case 'z': GLCD_DisplaySpecialPattern(GLCD_CHAR_Z); break;
     8e0:	21 e6       	ldi	r18, 0x61	; 97
     8e2:	31 e5       	ldi	r19, 0x51	; 81
     8e4:	49 e4       	ldi	r20, 0x49	; 73
     8e6:	55 e4       	ldi	r21, 0x45	; 69
     8e8:	63 e4       	ldi	r22, 0x43	; 67
     8ea:	70 e0       	ldi	r23, 0x00	; 0
     8ec:	80 e0       	ldi	r24, 0x00	; 0
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     8f4:	c5 c0       	rjmp	.+394    	; 0xa80 <__stack+0x221>
			case 'M': case 'm': GLCD_DisplaySpecialPattern(GLCD_CHAR_M); break;
     8f6:	2f e7       	ldi	r18, 0x7F	; 127
     8f8:	32 e0       	ldi	r19, 0x02	; 2
     8fa:	4c e0       	ldi	r20, 0x0C	; 12
     8fc:	52 e0       	ldi	r21, 0x02	; 2
     8fe:	6f e7       	ldi	r22, 0x7F	; 127
     900:	70 e0       	ldi	r23, 0x00	; 0
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     90a:	ba c0       	rjmp	.+372    	; 0xa80 <__stack+0x221>
			case 'S': case 's': GLCD_DisplaySpecialPattern(GLCD_CHAR_S); break;
     90c:	2f e4       	ldi	r18, 0x4F	; 79
     90e:	39 e4       	ldi	r19, 0x49	; 73
     910:	49 e4       	ldi	r20, 0x49	; 73
     912:	59 e4       	ldi	r21, 0x49	; 73
     914:	69 ef       	ldi	r22, 0xF9	; 249
     916:	70 e0       	ldi	r23, 0x00	; 0
     918:	80 e0       	ldi	r24, 0x00	; 0
     91a:	90 e0       	ldi	r25, 0x00	; 0
     91c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     920:	af c0       	rjmp	.+350    	; 0xa80 <__stack+0x221>
			case 'I': case 'i': GLCD_DisplaySpecialPattern(GLCD_CHAR_I); break;
     922:	21 e4       	ldi	r18, 0x41	; 65
     924:	31 e4       	ldi	r19, 0x41	; 65
     926:	4f e7       	ldi	r20, 0x7F	; 127
     928:	51 e4       	ldi	r21, 0x41	; 65
     92a:	61 e4       	ldi	r22, 0x41	; 65
     92c:	70 e0       	ldi	r23, 0x00	; 0
     92e:	80 e0       	ldi	r24, 0x00	; 0
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     936:	a4 c0       	rjmp	.+328    	; 0xa80 <__stack+0x221>
			case '%': GLCD_DisplaySpecialPattern(GLCD_CHAR_PERCENT); break;
     938:	23 ec       	ldi	r18, 0xC3	; 195
     93a:	33 e7       	ldi	r19, 0x73	; 115
     93c:	48 e1       	ldi	r20, 0x18	; 24
     93e:	5e ec       	ldi	r21, 0xCE	; 206
     940:	63 ec       	ldi	r22, 0xC3	; 195
     942:	70 e0       	ldi	r23, 0x00	; 0
     944:	80 e0       	ldi	r24, 0x00	; 0
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     94c:	99 c0       	rjmp	.+306    	; 0xa80 <__stack+0x221>
			case '=': GLCD_DisplaySpecialPattern(GLCD_CHAR_EQUAL); break;
     94e:	24 e2       	ldi	r18, 0x24	; 36
     950:	34 e2       	ldi	r19, 0x24	; 36
     952:	44 e2       	ldi	r20, 0x24	; 36
     954:	54 e2       	ldi	r21, 0x24	; 36
     956:	64 e2       	ldi	r22, 0x24	; 36
     958:	70 e0       	ldi	r23, 0x00	; 0
     95a:	80 e0       	ldi	r24, 0x00	; 0
     95c:	90 e0       	ldi	r25, 0x00	; 0
     95e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     962:	8e c0       	rjmp	.+284    	; 0xa80 <__stack+0x221>
			case '.': GLCD_DisplaySpecialPattern(GLCD_CHAR_POINT); break;
     964:	20 e0       	ldi	r18, 0x00	; 0
     966:	30 e7       	ldi	r19, 0x70	; 112
     968:	40 e7       	ldi	r20, 0x70	; 112
     96a:	50 e7       	ldi	r21, 0x70	; 112
     96c:	60 e0       	ldi	r22, 0x00	; 0
     96e:	70 e0       	ldi	r23, 0x00	; 0
     970:	80 e0       	ldi	r24, 0x00	; 0
     972:	90 e0       	ldi	r25, 0x00	; 0
     974:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     978:	83 c0       	rjmp	.+262    	; 0xa80 <__stack+0x221>
			case ' ': GLCD_DisplaySpecialPattern(GLCD_CHAR_SPACE); break;
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	50 e0       	ldi	r21, 0x00	; 0
     982:	60 e0       	ldi	r22, 0x00	; 0
     984:	70 e0       	ldi	r23, 0x00	; 0
     986:	80 e0       	ldi	r24, 0x00	; 0
     988:	90 e0       	ldi	r25, 0x00	; 0
     98a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     98e:	78 c0       	rjmp	.+240    	; 0xa80 <__stack+0x221>
			case '-': GLCD_DisplaySpecialPattern(GLCD_CHAR_NEGATIVE); break;
     990:	28 e1       	ldi	r18, 0x18	; 24
     992:	38 e1       	ldi	r19, 0x18	; 24
     994:	48 e1       	ldi	r20, 0x18	; 24
     996:	58 e1       	ldi	r21, 0x18	; 24
     998:	68 e1       	ldi	r22, 0x18	; 24
     99a:	70 e0       	ldi	r23, 0x00	; 0
     99c:	80 e0       	ldi	r24, 0x00	; 0
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     9a4:	6d c0       	rjmp	.+218    	; 0xa80 <__stack+0x221>
			case '0': GLCD_DisplaySpecialPattern(GLCD_CHAR_0); break;
     9a6:	2e e3       	ldi	r18, 0x3E	; 62
     9a8:	31 e5       	ldi	r19, 0x51	; 81
     9aa:	49 e4       	ldi	r20, 0x49	; 73
     9ac:	55 e4       	ldi	r21, 0x45	; 69
     9ae:	6e e3       	ldi	r22, 0x3E	; 62
     9b0:	70 e0       	ldi	r23, 0x00	; 0
     9b2:	80 e0       	ldi	r24, 0x00	; 0
     9b4:	90 e0       	ldi	r25, 0x00	; 0
     9b6:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     9ba:	62 c0       	rjmp	.+196    	; 0xa80 <__stack+0x221>
			case '1': GLCD_DisplaySpecialPattern(GLCD_CHAR_1); break;
     9bc:	24 e4       	ldi	r18, 0x44	; 68
     9be:	32 e4       	ldi	r19, 0x42	; 66
     9c0:	4f e7       	ldi	r20, 0x7F	; 127
     9c2:	50 e4       	ldi	r21, 0x40	; 64
     9c4:	60 e4       	ldi	r22, 0x40	; 64
     9c6:	70 e0       	ldi	r23, 0x00	; 0
     9c8:	80 e0       	ldi	r24, 0x00	; 0
     9ca:	90 e0       	ldi	r25, 0x00	; 0
     9cc:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     9d0:	57 c0       	rjmp	.+174    	; 0xa80 <__stack+0x221>
			case '2': GLCD_DisplaySpecialPattern(GLCD_CHAR_2); break;
     9d2:	26 e4       	ldi	r18, 0x46	; 70
     9d4:	31 e6       	ldi	r19, 0x61	; 97
     9d6:	41 e5       	ldi	r20, 0x51	; 81
     9d8:	5e e4       	ldi	r21, 0x4E	; 78
     9da:	60 e4       	ldi	r22, 0x40	; 64
     9dc:	70 e0       	ldi	r23, 0x00	; 0
     9de:	80 e0       	ldi	r24, 0x00	; 0
     9e0:	90 e0       	ldi	r25, 0x00	; 0
     9e2:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     9e6:	4c c0       	rjmp	.+152    	; 0xa80 <__stack+0x221>
			case '3': GLCD_DisplaySpecialPattern(GLCD_CHAR_3); break;
     9e8:	21 e4       	ldi	r18, 0x41	; 65
     9ea:	39 e4       	ldi	r19, 0x49	; 73
     9ec:	49 e4       	ldi	r20, 0x49	; 73
     9ee:	59 e4       	ldi	r21, 0x49	; 73
     9f0:	66 e3       	ldi	r22, 0x36	; 54
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	80 e0       	ldi	r24, 0x00	; 0
     9f6:	90 e0       	ldi	r25, 0x00	; 0
     9f8:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     9fc:	41 c0       	rjmp	.+130    	; 0xa80 <__stack+0x221>
			case '4': GLCD_DisplaySpecialPattern(GLCD_CHAR_4); break;
     9fe:	28 e1       	ldi	r18, 0x18	; 24
     a00:	34 e1       	ldi	r19, 0x14	; 20
     a02:	42 e1       	ldi	r20, 0x12	; 18
     a04:	5f e7       	ldi	r21, 0x7F	; 127
     a06:	60 e1       	ldi	r22, 0x10	; 16
     a08:	70 e0       	ldi	r23, 0x00	; 0
     a0a:	80 e0       	ldi	r24, 0x00	; 0
     a0c:	90 e0       	ldi	r25, 0x00	; 0
     a0e:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     a12:	36 c0       	rjmp	.+108    	; 0xa80 <__stack+0x221>
			case '5': GLCD_DisplaySpecialPattern(GLCD_CHAR_5); break;
     a14:	2f e4       	ldi	r18, 0x4F	; 79
     a16:	39 e4       	ldi	r19, 0x49	; 73
     a18:	49 e4       	ldi	r20, 0x49	; 73
     a1a:	51 e5       	ldi	r21, 0x51	; 81
     a1c:	61 e2       	ldi	r22, 0x21	; 33
     a1e:	70 e0       	ldi	r23, 0x00	; 0
     a20:	80 e0       	ldi	r24, 0x00	; 0
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     a28:	2b c0       	rjmp	.+86     	; 0xa80 <__stack+0x221>
			case '6': GLCD_DisplaySpecialPattern(GLCD_CHAR_6); break;
     a2a:	2c e7       	ldi	r18, 0x7C	; 124
     a2c:	3a e4       	ldi	r19, 0x4A	; 74
     a2e:	49 e4       	ldi	r20, 0x49	; 73
     a30:	59 e4       	ldi	r21, 0x49	; 73
     a32:	61 e3       	ldi	r22, 0x31	; 49
     a34:	70 e0       	ldi	r23, 0x00	; 0
     a36:	80 e0       	ldi	r24, 0x00	; 0
     a38:	90 e0       	ldi	r25, 0x00	; 0
     a3a:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     a3e:	20 c0       	rjmp	.+64     	; 0xa80 <__stack+0x221>
			case '7': GLCD_DisplaySpecialPattern(GLCD_CHAR_7); break;
     a40:	21 e0       	ldi	r18, 0x01	; 1
     a42:	39 e4       	ldi	r19, 0x49	; 73
     a44:	49 e2       	ldi	r20, 0x29	; 41
     a46:	59 e1       	ldi	r21, 0x19	; 25
     a48:	6f e0       	ldi	r22, 0x0F	; 15
     a4a:	70 e0       	ldi	r23, 0x00	; 0
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	90 e0       	ldi	r25, 0x00	; 0
     a50:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     a54:	15 c0       	rjmp	.+42     	; 0xa80 <__stack+0x221>
			case '8': GLCD_DisplaySpecialPattern(GLCD_CHAR_8); break;
     a56:	27 e7       	ldi	r18, 0x77	; 119
     a58:	39 e4       	ldi	r19, 0x49	; 73
     a5a:	49 e4       	ldi	r20, 0x49	; 73
     a5c:	59 e4       	ldi	r21, 0x49	; 73
     a5e:	67 e7       	ldi	r22, 0x77	; 119
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	80 e0       	ldi	r24, 0x00	; 0
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
     a6a:	0a c0       	rjmp	.+20     	; 0xa80 <__stack+0x221>
			case '9': GLCD_DisplaySpecialPattern(GLCD_CHAR_9); break;
     a6c:	2f e4       	ldi	r18, 0x4F	; 79
     a6e:	39 e4       	ldi	r19, 0x49	; 73
     a70:	49 e4       	ldi	r20, 0x49	; 73
     a72:	59 e4       	ldi	r21, 0x49	; 73
     a74:	6f e7       	ldi	r22, 0x7F	; 127
     a76:	70 e0       	ldi	r23, 0x00	; 0
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	90 e0       	ldi	r25, 0x00	; 0
     a7c:	0e 94 73 03 	call	0x6e6	; 0x6e6 <GLCD_DisplaySpecialPattern>
			default: break;
		}
		GLCD_SendInstruction(GLCD_SETX + Current_X);
     a80:	80 91 ac 00 	lds	r24, 0x00AC	; 0x8000ac <Current_X>
     a84:	88 54       	subi	r24, 0x48	; 72
     a86:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <GLCD_SendInstruction>
		GLCD_SendInstruction(GLCD_SETY + Current_Y);
     a8a:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <Current_Y>
     a8e:	80 5c       	subi	r24, 0xC0	; 192
     a90:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <GLCD_SendInstruction>
		GLCD_SendData(0);
     a94:	80 e0       	ldi	r24, 0x00	; 0
     a96:	0e 94 44 03 	call	0x688	; 0x688 <GLCD_SendData>
		Current_Y++;
     a9a:	80 91 ab 00 	lds	r24, 0x00AB	; 0x8000ab <Current_Y>
     a9e:	8f 5f       	subi	r24, 0xFF	; 255
     aa0:	80 93 ab 00 	sts	0x00AB, r24	; 0x8000ab <Current_Y>
		if (Current_Y >= GLCD_MAX_PAGE_PIXEL_WIDTH && Current_Page == 0) {
     aa4:	80 34       	cpi	r24, 0x40	; 64
     aa6:	48 f0       	brcs	.+18     	; 0xaba <__stack+0x25b>
     aa8:	80 91 aa 00 	lds	r24, 0x00AA	; 0x8000aa <__data_end>
     aac:	81 11       	cpse	r24, r1
     aae:	05 c0       	rjmp	.+10     	; 0xaba <__stack+0x25b>
			GLCD_SelectPage(GLCD_PAGE_1);
     ab0:	82 e0       	ldi	r24, 0x02	; 2
     ab2:	0e 94 ad 02 	call	0x55a	; 0x55a <GLCD_SelectPage>
			Current_Page = 0;
     ab6:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__data_end>
     aba:	08 95       	ret

00000abc <GLCD_DisplayString>:
		}
	}
}

void GLCD_DisplayString(char* Data_Ptr) {
     abc:	cf 93       	push	r28
     abe:	df 93       	push	r29
     ac0:	ec 01       	movw	r28, r24
	while (*Data_Ptr != '\0') {
     ac2:	03 c0       	rjmp	.+6      	; 0xaca <GLCD_DisplayString+0xe>
		GLCD_DisplayCharacter(*Data_Ptr);
     ac4:	0e 94 c6 03 	call	0x78c	; 0x78c <GLCD_DisplayCharacter>
		Data_Ptr++;
     ac8:	21 96       	adiw	r28, 0x01	; 1
		}
	}
}

void GLCD_DisplayString(char* Data_Ptr) {
	while (*Data_Ptr != '\0') {
     aca:	88 81       	ld	r24, Y
     acc:	81 11       	cpse	r24, r1
     ace:	fa cf       	rjmp	.-12     	; 0xac4 <GLCD_DisplayString+0x8>
		GLCD_DisplayCharacter(*Data_Ptr);
		Data_Ptr++;
	}
}
     ad0:	df 91       	pop	r29
     ad2:	cf 91       	pop	r28
     ad4:	08 95       	ret

00000ad6 <GLCD_DisplayInteger>:

void GLCD_DisplayInteger(sint32 Data) {
     ad6:	cf 92       	push	r12
     ad8:	df 92       	push	r13
     ada:	ef 92       	push	r14
     adc:	ff 92       	push	r15
     ade:	0f 93       	push	r16
     ae0:	1f 93       	push	r17
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	00 d0       	rcall	.+0      	; 0xae8 <GLCD_DisplayInteger+0x12>
     ae8:	00 d0       	rcall	.+0      	; 0xaea <GLCD_DisplayInteger+0x14>
     aea:	1f 92       	push	r1
     aec:	cd b7       	in	r28, 0x3d	; 61
     aee:	de b7       	in	r29, 0x3e	; 62
     af0:	6b 01       	movw	r12, r22
     af2:	7c 01       	movw	r14, r24
	if (Data < 0) {
     af4:	99 23       	and	r25, r25
     af6:	5c f4       	brge	.+22     	; 0xb0e <GLCD_DisplayInteger+0x38>
		GLCD_DisplayCharacter('-');
     af8:	8d e2       	ldi	r24, 0x2D	; 45
     afa:	0e 94 c6 03 	call	0x78c	; 0x78c <GLCD_DisplayCharacter>
		Data = -1 * Data;
     afe:	f0 94       	com	r15
     b00:	e0 94       	com	r14
     b02:	d0 94       	com	r13
     b04:	c0 94       	com	r12
     b06:	c1 1c       	adc	r12, r1
     b08:	d1 1c       	adc	r13, r1
     b0a:	e1 1c       	adc	r14, r1
     b0c:	f1 1c       	adc	r15, r1
	}
	uint8 u8Local_Digit = 0U;
	char str_reversed[5] = "";
     b0e:	1a 82       	std	Y+2, r1	; 0x02
     b10:	19 82       	std	Y+1, r1	; 0x01
     b12:	fe 01       	movw	r30, r28
     b14:	33 96       	adiw	r30, 0x03	; 3
     b16:	83 e0       	ldi	r24, 0x03	; 3
     b18:	df 01       	movw	r26, r30
     b1a:	1d 92       	st	X+, r1
     b1c:	8a 95       	dec	r24
     b1e:	e9 f7       	brne	.-6      	; 0xb1a <GLCD_DisplayInteger+0x44>
	char* str_ptr = str_reversed;
     b20:	8e 01       	movw	r16, r28
     b22:	0f 5f       	subi	r16, 0xFF	; 255
     b24:	1f 4f       	sbci	r17, 0xFF	; 255
	do {
		u8Local_Digit = Data%10;
     b26:	c7 01       	movw	r24, r14
     b28:	b6 01       	movw	r22, r12
     b2a:	2a e0       	ldi	r18, 0x0A	; 10
     b2c:	30 e0       	ldi	r19, 0x00	; 0
     b2e:	40 e0       	ldi	r20, 0x00	; 0
     b30:	50 e0       	ldi	r21, 0x00	; 0
     b32:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__divmodsi4>
		*str_ptr = (char)(48 + u8Local_Digit); /* 48 is the ASCII code of '0' */
     b36:	60 5d       	subi	r22, 0xD0	; 208
     b38:	f8 01       	movw	r30, r16
     b3a:	61 93       	st	Z+, r22
     b3c:	8f 01       	movw	r16, r30
		Data = Data/10;
     b3e:	c2 2e       	mov	r12, r18
     b40:	d3 2e       	mov	r13, r19
     b42:	e4 2e       	mov	r14, r20
     b44:	f5 2e       	mov	r15, r21
		str_ptr++;
	} while (Data > 0);
     b46:	1c 14       	cp	r1, r12
     b48:	1d 04       	cpc	r1, r13
     b4a:	1e 04       	cpc	r1, r14
     b4c:	1f 04       	cpc	r1, r15
     b4e:	5c f3       	brlt	.-42     	; 0xb26 <GLCD_DisplayInteger+0x50>
	do {
		str_ptr--;
		GLCD_DisplayCharacter(*str_ptr);
     b50:	d8 01       	movw	r26, r16
     b52:	8e 91       	ld	r24, -X
     b54:	8d 01       	movw	r16, r26
     b56:	0e 94 c6 03 	call	0x78c	; 0x78c <GLCD_DisplayCharacter>
	} while (str_ptr != str_reversed);
     b5a:	ce 01       	movw	r24, r28
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	80 17       	cp	r24, r16
     b60:	91 07       	cpc	r25, r17
     b62:	b1 f7       	brne	.-20     	; 0xb50 <GLCD_DisplayInteger+0x7a>
}
     b64:	0f 90       	pop	r0
     b66:	0f 90       	pop	r0
     b68:	0f 90       	pop	r0
     b6a:	0f 90       	pop	r0
     b6c:	0f 90       	pop	r0
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	1f 91       	pop	r17
     b74:	0f 91       	pop	r16
     b76:	ff 90       	pop	r15
     b78:	ef 90       	pop	r14
     b7a:	df 90       	pop	r13
     b7c:	cf 90       	pop	r12
     b7e:	08 95       	ret

00000b80 <GLCD_DisplayFloatingPoint>:

void GLCD_DisplayFloatingPoint(float32 Data) {
     b80:	8f 92       	push	r8
     b82:	9f 92       	push	r9
     b84:	af 92       	push	r10
     b86:	bf 92       	push	r11
     b88:	cf 92       	push	r12
     b8a:	df 92       	push	r13
     b8c:	ef 92       	push	r14
     b8e:	ff 92       	push	r15
     b90:	cf 93       	push	r28
     b92:	df 93       	push	r29
     b94:	4b 01       	movw	r8, r22
     b96:	5c 01       	movw	r10, r24
	/* Will display only 3 Decimal Places */
	uint16 IntegerPart = (uint16)Data;
     b98:	0e 94 29 09 	call	0x1252	; 0x1252 <__fixunssfsi>
	GLCD_DisplayInteger(IntegerPart);
     b9c:	6b 01       	movw	r12, r22
     b9e:	e1 2c       	mov	r14, r1
     ba0:	f1 2c       	mov	r15, r1
     ba2:	c7 01       	movw	r24, r14
     ba4:	b6 01       	movw	r22, r12
     ba6:	0e 94 6b 05 	call	0xad6	; 0xad6 <GLCD_DisplayInteger>
	GLCD_DisplayCharacter('.');
     baa:	8e e2       	ldi	r24, 0x2E	; 46
     bac:	0e 94 c6 03 	call	0x78c	; 0x78c <GLCD_DisplayCharacter>
	float32 DecimalPart = (Data - IntegerPart);
     bb0:	c7 01       	movw	r24, r14
     bb2:	b6 01       	movw	r22, r12
     bb4:	0e 94 58 09 	call	0x12b0	; 0x12b0 <__floatunsisf>
     bb8:	9b 01       	movw	r18, r22
     bba:	ac 01       	movw	r20, r24
     bbc:	c5 01       	movw	r24, r10
     bbe:	b4 01       	movw	r22, r8
     bc0:	0e 94 4a 08 	call	0x1094	; 0x1094 <__subsf3>
	uint8 Digit = 0;
	for (uint8 i = 0; i < 3; i++) {
     bc4:	d0 e0       	ldi	r29, 0x00	; 0
     bc6:	1c c0       	rjmp	.+56     	; 0xc00 <GLCD_DisplayFloatingPoint+0x80>
		Digit = (uint8)(DecimalPart * 10.0);
     bc8:	20 e0       	ldi	r18, 0x00	; 0
     bca:	30 e0       	ldi	r19, 0x00	; 0
     bcc:	40 e2       	ldi	r20, 0x20	; 32
     bce:	51 e4       	ldi	r21, 0x41	; 65
     bd0:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__mulsf3>
     bd4:	6b 01       	movw	r12, r22
     bd6:	7c 01       	movw	r14, r24
     bd8:	0e 94 29 09 	call	0x1252	; 0x1252 <__fixunssfsi>
     bdc:	c6 2f       	mov	r28, r22
		GLCD_DisplayCharacter((char)(48+Digit));
     bde:	80 e3       	ldi	r24, 0x30	; 48
     be0:	8c 0f       	add	r24, r28
     be2:	0e 94 c6 03 	call	0x78c	; 0x78c <GLCD_DisplayCharacter>
		DecimalPart = ((DecimalPart*10.0) - Digit);
     be6:	6c 2f       	mov	r22, r28
     be8:	70 e0       	ldi	r23, 0x00	; 0
     bea:	80 e0       	ldi	r24, 0x00	; 0
     bec:	90 e0       	ldi	r25, 0x00	; 0
     bee:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__floatsisf>
     bf2:	9b 01       	movw	r18, r22
     bf4:	ac 01       	movw	r20, r24
     bf6:	c7 01       	movw	r24, r14
     bf8:	b6 01       	movw	r22, r12
     bfa:	0e 94 4a 08 	call	0x1094	; 0x1094 <__subsf3>
	uint16 IntegerPart = (uint16)Data;
	GLCD_DisplayInteger(IntegerPart);
	GLCD_DisplayCharacter('.');
	float32 DecimalPart = (Data - IntegerPart);
	uint8 Digit = 0;
	for (uint8 i = 0; i < 3; i++) {
     bfe:	df 5f       	subi	r29, 0xFF	; 255
     c00:	d3 30       	cpi	r29, 0x03	; 3
     c02:	10 f3       	brcs	.-60     	; 0xbc8 <GLCD_DisplayFloatingPoint+0x48>
		Digit = (uint8)(DecimalPart * 10.0);
		GLCD_DisplayCharacter((char)(48+Digit));
		DecimalPart = ((DecimalPart*10.0) - Digit);
	}
}
     c04:	df 91       	pop	r29
     c06:	cf 91       	pop	r28
     c08:	ff 90       	pop	r15
     c0a:	ef 90       	pop	r14
     c0c:	df 90       	pop	r13
     c0e:	cf 90       	pop	r12
     c10:	bf 90       	pop	r11
     c12:	af 90       	pop	r10
     c14:	9f 90       	pop	r9
     c16:	8f 90       	pop	r8
     c18:	08 95       	ret

00000c1a <GLCD_GoToLine>:

void GLCD_GoToLine(uint8 Line) {
     c1a:	cf 93       	push	r28
	if (Line < GLCD_MAX_LINES) {
     c1c:	88 30       	cpi	r24, 0x08	; 8
     c1e:	78 f4       	brcc	.+30     	; 0xc3e <GLCD_GoToLine+0x24>
     c20:	c8 2f       	mov	r28, r24
		GLCD_SelectPage(GLCD_PAGE_0);
     c22:	81 e0       	ldi	r24, 0x01	; 1
     c24:	0e 94 ad 02 	call	0x55a	; 0x55a <GLCD_SelectPage>
		Current_X = Line;
     c28:	c0 93 ac 00 	sts	0x00AC, r28	; 0x8000ac <Current_X>
		GLCD_SendInstruction(GLCD_SETX + Current_X);
     c2c:	88 eb       	ldi	r24, 0xB8	; 184
     c2e:	8c 0f       	add	r24, r28
     c30:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <GLCD_SendInstruction>
		Current_Y = 0;
     c34:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <Current_Y>
		GLCD_SendInstruction(GLCD_SETY + Current_Y);
     c38:	80 e4       	ldi	r24, 0x40	; 64
     c3a:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <GLCD_SendInstruction>
	}
}
     c3e:	cf 91       	pop	r28
     c40:	08 95       	ret

00000c42 <GLCD_ClearDisplay>:

void GLCD_ClearDisplay(void) {
     c42:	cf 93       	push	r28
     c44:	df 93       	push	r29
	for (uint8 Line = 0; Line < GLCD_MAX_LINES; Line++) {
     c46:	d0 e0       	ldi	r29, 0x00	; 0
     c48:	13 c0       	rjmp	.+38     	; 0xc70 <GLCD_ClearDisplay+0x2e>
		GLCD_GoToLine(Line);
     c4a:	8d 2f       	mov	r24, r29
     c4c:	0e 94 0d 06 	call	0xc1a	; 0xc1a <GLCD_GoToLine>
		GLCD_SelectPage(GLCD_BOTH_SIDES);
     c50:	83 e0       	ldi	r24, 0x03	; 3
     c52:	0e 94 ad 02 	call	0x55a	; 0x55a <GLCD_SelectPage>
		for (uint8 i = 0; i < GLCD_MAX_PAGE_PIXEL_WIDTH; i++) {
     c56:	c0 e0       	ldi	r28, 0x00	; 0
     c58:	08 c0       	rjmp	.+16     	; 0xc6a <GLCD_ClearDisplay+0x28>
			GLCD_SendInstruction(GLCD_SETY + i);
     c5a:	80 e4       	ldi	r24, 0x40	; 64
     c5c:	8c 0f       	add	r24, r28
     c5e:	0e 94 e1 02 	call	0x5c2	; 0x5c2 <GLCD_SendInstruction>
			GLCD_SendData(0);
     c62:	80 e0       	ldi	r24, 0x00	; 0
     c64:	0e 94 44 03 	call	0x688	; 0x688 <GLCD_SendData>

void GLCD_ClearDisplay(void) {
	for (uint8 Line = 0; Line < GLCD_MAX_LINES; Line++) {
		GLCD_GoToLine(Line);
		GLCD_SelectPage(GLCD_BOTH_SIDES);
		for (uint8 i = 0; i < GLCD_MAX_PAGE_PIXEL_WIDTH; i++) {
     c68:	cf 5f       	subi	r28, 0xFF	; 255
     c6a:	c0 34       	cpi	r28, 0x40	; 64
     c6c:	b0 f3       	brcs	.-20     	; 0xc5a <GLCD_ClearDisplay+0x18>
		GLCD_SendInstruction(GLCD_SETY + Current_Y);
	}
}

void GLCD_ClearDisplay(void) {
	for (uint8 Line = 0; Line < GLCD_MAX_LINES; Line++) {
     c6e:	df 5f       	subi	r29, 0xFF	; 255
     c70:	d8 30       	cpi	r29, 0x08	; 8
     c72:	58 f3       	brcs	.-42     	; 0xc4a <GLCD_ClearDisplay+0x8>
		for (uint8 i = 0; i < GLCD_MAX_PAGE_PIXEL_WIDTH; i++) {
			GLCD_SendInstruction(GLCD_SETY + i);
			GLCD_SendData(0);
		}
	}
	GLCD_Reset();
     c74:	0e 94 64 03 	call	0x6c8	; 0x6c8 <GLCD_Reset>
	GLCD_SelectPage(GLCD_PAGE_0);
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	0e 94 ad 02 	call	0x55a	; 0x55a <GLCD_SelectPage>
	Current_Page = 0;
     c7e:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__data_end>
	GLCD_GoToLine(0);
     c82:	80 e0       	ldi	r24, 0x00	; 0
     c84:	0e 94 0d 06 	call	0xc1a	; 0xc1a <GLCD_GoToLine>
}
     c88:	df 91       	pop	r29
     c8a:	cf 91       	pop	r28
     c8c:	08 95       	ret

00000c8e <DIO_ObtainRegister>:
DIO_StateType DIO_ReadPin(DIO_PortType Port, DIO_PinType Pin) {
	DIO_StateType eLocal_State = DIO_LOW;
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_INPUT_REG);
	eLocal_State = READ_BIT(*Reg_Ptr, Pin);
	return eLocal_State;
}
     c8e:	81 30       	cpi	r24, 0x01	; 1
     c90:	a9 f0       	breq	.+42     	; 0xcbc <DIO_ObtainRegister+0x2e>
     c92:	28 f0       	brcs	.+10     	; 0xc9e <DIO_ObtainRegister+0x10>
     c94:	82 30       	cpi	r24, 0x02	; 2
     c96:	09 f1       	breq	.+66     	; 0xcda <DIO_ObtainRegister+0x4c>
     c98:	83 30       	cpi	r24, 0x03	; 3
     c9a:	71 f1       	breq	.+92     	; 0xcf8 <DIO_ObtainRegister+0x6a>
     c9c:	3c c0       	rjmp	.+120    	; 0xd16 <DIO_ObtainRegister+0x88>
     c9e:	61 30       	cpi	r22, 0x01	; 1
     ca0:	e9 f1       	breq	.+122    	; 0xd1c <DIO_ObtainRegister+0x8e>
     ca2:	18 f0       	brcs	.+6      	; 0xcaa <DIO_ObtainRegister+0x1c>
     ca4:	62 30       	cpi	r22, 0x02	; 2
     ca6:	39 f0       	breq	.+14     	; 0xcb6 <DIO_ObtainRegister+0x28>
     ca8:	03 c0       	rjmp	.+6      	; 0xcb0 <DIO_ObtainRegister+0x22>
     caa:	8a e3       	ldi	r24, 0x3A	; 58
     cac:	90 e0       	ldi	r25, 0x00	; 0
     cae:	08 95       	ret
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	90 e0       	ldi	r25, 0x00	; 0
     cb4:	08 95       	ret
     cb6:	89 e3       	ldi	r24, 0x39	; 57
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	08 95       	ret
     cbc:	61 30       	cpi	r22, 0x01	; 1
     cbe:	89 f1       	breq	.+98     	; 0xd22 <DIO_ObtainRegister+0x94>
     cc0:	18 f0       	brcs	.+6      	; 0xcc8 <DIO_ObtainRegister+0x3a>
     cc2:	62 30       	cpi	r22, 0x02	; 2
     cc4:	39 f0       	breq	.+14     	; 0xcd4 <DIO_ObtainRegister+0x46>
     cc6:	03 c0       	rjmp	.+6      	; 0xcce <DIO_ObtainRegister+0x40>
     cc8:	87 e3       	ldi	r24, 0x37	; 55
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	08 95       	ret
     cce:	80 e0       	ldi	r24, 0x00	; 0
     cd0:	90 e0       	ldi	r25, 0x00	; 0
     cd2:	08 95       	ret
     cd4:	86 e3       	ldi	r24, 0x36	; 54
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	08 95       	ret
     cda:	61 30       	cpi	r22, 0x01	; 1
     cdc:	29 f1       	breq	.+74     	; 0xd28 <DIO_ObtainRegister+0x9a>
     cde:	18 f0       	brcs	.+6      	; 0xce6 <DIO_ObtainRegister+0x58>
     ce0:	62 30       	cpi	r22, 0x02	; 2
     ce2:	39 f0       	breq	.+14     	; 0xcf2 <DIO_ObtainRegister+0x64>
     ce4:	03 c0       	rjmp	.+6      	; 0xcec <DIO_ObtainRegister+0x5e>
     ce6:	84 e3       	ldi	r24, 0x34	; 52
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	08 95       	ret
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	08 95       	ret
     cf2:	83 e3       	ldi	r24, 0x33	; 51
     cf4:	90 e0       	ldi	r25, 0x00	; 0
     cf6:	08 95       	ret
     cf8:	61 30       	cpi	r22, 0x01	; 1
     cfa:	c9 f0       	breq	.+50     	; 0xd2e <DIO_ObtainRegister+0xa0>
     cfc:	18 f0       	brcs	.+6      	; 0xd04 <DIO_ObtainRegister+0x76>
     cfe:	62 30       	cpi	r22, 0x02	; 2
     d00:	39 f0       	breq	.+14     	; 0xd10 <DIO_ObtainRegister+0x82>
     d02:	03 c0       	rjmp	.+6      	; 0xd0a <DIO_ObtainRegister+0x7c>
     d04:	81 e3       	ldi	r24, 0x31	; 49
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	08 95       	ret
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	08 95       	ret
     d10:	80 e3       	ldi	r24, 0x30	; 48
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	08 95       	ret
     d16:	80 e0       	ldi	r24, 0x00	; 0
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	08 95       	ret
     d1c:	8b e3       	ldi	r24, 0x3B	; 59
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	08 95       	ret
     d22:	88 e3       	ldi	r24, 0x38	; 56
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	08 95       	ret
     d28:	85 e3       	ldi	r24, 0x35	; 53
     d2a:	90 e0       	ldi	r25, 0x00	; 0
     d2c:	08 95       	ret
     d2e:	82 e3       	ldi	r24, 0x32	; 50
     d30:	90 e0       	ldi	r25, 0x00	; 0
     d32:	08 95       	ret

00000d34 <DIO_SetPinDirection>:
     d34:	cf 93       	push	r28
     d36:	df 93       	push	r29
     d38:	d6 2f       	mov	r29, r22
     d3a:	c4 2f       	mov	r28, r20
     d3c:	60 e0       	ldi	r22, 0x00	; 0
     d3e:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_ObtainRegister>
     d42:	cc 23       	and	r28, r28
     d44:	19 f0       	breq	.+6      	; 0xd4c <DIO_SetPinDirection+0x18>
     d46:	c1 30       	cpi	r28, 0x01	; 1
     d48:	71 f0       	breq	.+28     	; 0xd66 <DIO_SetPinDirection+0x32>
     d4a:	18 c0       	rjmp	.+48     	; 0xd7c <DIO_SetPinDirection+0x48>
     d4c:	fc 01       	movw	r30, r24
     d4e:	40 81       	ld	r20, Z
     d50:	21 e0       	ldi	r18, 0x01	; 1
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	02 c0       	rjmp	.+4      	; 0xd5a <DIO_SetPinDirection+0x26>
     d56:	22 0f       	add	r18, r18
     d58:	33 1f       	adc	r19, r19
     d5a:	da 95       	dec	r29
     d5c:	e2 f7       	brpl	.-8      	; 0xd56 <DIO_SetPinDirection+0x22>
     d5e:	20 95       	com	r18
     d60:	24 23       	and	r18, r20
     d62:	20 83       	st	Z, r18
     d64:	0b c0       	rjmp	.+22     	; 0xd7c <DIO_SetPinDirection+0x48>
     d66:	fc 01       	movw	r30, r24
     d68:	40 81       	ld	r20, Z
     d6a:	21 e0       	ldi	r18, 0x01	; 1
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	02 c0       	rjmp	.+4      	; 0xd74 <DIO_SetPinDirection+0x40>
     d70:	22 0f       	add	r18, r18
     d72:	33 1f       	adc	r19, r19
     d74:	da 95       	dec	r29
     d76:	e2 f7       	brpl	.-8      	; 0xd70 <DIO_SetPinDirection+0x3c>
     d78:	24 2b       	or	r18, r20
     d7a:	20 83       	st	Z, r18
     d7c:	df 91       	pop	r29
     d7e:	cf 91       	pop	r28
     d80:	08 95       	ret

00000d82 <DIO_WritePin>:
     d82:	cf 93       	push	r28
     d84:	df 93       	push	r29
     d86:	d6 2f       	mov	r29, r22
     d88:	c4 2f       	mov	r28, r20
     d8a:	61 e0       	ldi	r22, 0x01	; 1
     d8c:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_ObtainRegister>
     d90:	cc 23       	and	r28, r28
     d92:	19 f0       	breq	.+6      	; 0xd9a <DIO_WritePin+0x18>
     d94:	c1 30       	cpi	r28, 0x01	; 1
     d96:	71 f0       	breq	.+28     	; 0xdb4 <DIO_WritePin+0x32>
     d98:	18 c0       	rjmp	.+48     	; 0xdca <DIO_WritePin+0x48>
     d9a:	fc 01       	movw	r30, r24
     d9c:	40 81       	ld	r20, Z
     d9e:	21 e0       	ldi	r18, 0x01	; 1
     da0:	30 e0       	ldi	r19, 0x00	; 0
     da2:	02 c0       	rjmp	.+4      	; 0xda8 <DIO_WritePin+0x26>
     da4:	22 0f       	add	r18, r18
     da6:	33 1f       	adc	r19, r19
     da8:	da 95       	dec	r29
     daa:	e2 f7       	brpl	.-8      	; 0xda4 <DIO_WritePin+0x22>
     dac:	20 95       	com	r18
     dae:	24 23       	and	r18, r20
     db0:	20 83       	st	Z, r18
     db2:	0b c0       	rjmp	.+22     	; 0xdca <DIO_WritePin+0x48>
     db4:	fc 01       	movw	r30, r24
     db6:	40 81       	ld	r20, Z
     db8:	21 e0       	ldi	r18, 0x01	; 1
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	02 c0       	rjmp	.+4      	; 0xdc2 <DIO_WritePin+0x40>
     dbe:	22 0f       	add	r18, r18
     dc0:	33 1f       	adc	r19, r19
     dc2:	da 95       	dec	r29
     dc4:	e2 f7       	brpl	.-8      	; 0xdbe <DIO_WritePin+0x3c>
     dc6:	24 2b       	or	r18, r20
     dc8:	20 83       	st	Z, r18
     dca:	df 91       	pop	r29
     dcc:	cf 91       	pop	r28
     dce:	08 95       	ret

00000dd0 <DIO_SetPortDirection>:


void DIO_SetPortDirection(DIO_PortType Port, DIO_DirectionType Direction) {
     dd0:	cf 93       	push	r28
     dd2:	c6 2f       	mov	r28, r22
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_DIRECTION_REG);
     dd4:	60 e0       	ldi	r22, 0x00	; 0
     dd6:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_ObtainRegister>
	switch (Direction) {
     dda:	cc 23       	and	r28, r28
     ddc:	19 f0       	breq	.+6      	; 0xde4 <DIO_SetPortDirection+0x14>
     dde:	c1 30       	cpi	r28, 0x01	; 1
     de0:	21 f0       	breq	.+8      	; 0xdea <DIO_SetPortDirection+0x1a>
     de2:	06 c0       	rjmp	.+12     	; 0xdf0 <DIO_SetPortDirection+0x20>
		case DIO_INPUT: *Reg_Ptr = 0x00U; break;
     de4:	fc 01       	movw	r30, r24
     de6:	10 82       	st	Z, r1
     de8:	03 c0       	rjmp	.+6      	; 0xdf0 <DIO_SetPortDirection+0x20>
		case DIO_OUTPUT: *Reg_Ptr = 0xFFU; break;
     dea:	2f ef       	ldi	r18, 0xFF	; 255
     dec:	fc 01       	movw	r30, r24
     dee:	20 83       	st	Z, r18
		default: break;
	}
}
     df0:	cf 91       	pop	r28
     df2:	08 95       	ret

00000df4 <DIO_WritePort>:

void DIO_WritePort(DIO_PortType Port, uint8 Value) {
     df4:	cf 93       	push	r28
     df6:	c6 2f       	mov	r28, r22
	volatile uint8* Reg_Ptr = DIO_ObtainRegister(Port, DIO_OUTPUT_REG);
     df8:	61 e0       	ldi	r22, 0x01	; 1
     dfa:	0e 94 47 06 	call	0xc8e	; 0xc8e <DIO_ObtainRegister>
	*Reg_Ptr = Value;
     dfe:	fc 01       	movw	r30, r24
     e00:	c0 83       	st	Z, r28
}
     e02:	cf 91       	pop	r28
     e04:	08 95       	ret

00000e06 <ICU_Init>:


/************************************************************************/
/*					Functions Implementations                           */
/************************************************************************/
void ICU_Init(const ICU_ConfigurationType* Config_Ptr) {
     e06:	fc 01       	movw	r30, r24
	/* Set ICP1 Pin (on PD6) as Input to trigger the ICU */
	CLEAR_BIT(*PORTD_DIR_REG, 6U);
     e08:	81 b3       	in	r24, 0x11	; 17
     e0a:	8f 7b       	andi	r24, 0xBF	; 191
     e0c:	81 bb       	out	0x11, r24	; 17
	/* Clear Configurations on TCCR1A and TCCR1B */
	*TIMER1_CTRL_REG_A = 0x00U;
     e0e:	1f bc       	out	0x2f, r1	; 47
	*TIMER1_CTRL_REG_B = 0x00U;
     e10:	1e bc       	out	0x2e, r1	; 46
	/* Timer 1 mode is set to normal */
	/* Set Prescaler */
	*TIMER1_CTRL_REG_B |= (Config_Ptr->Clk_Prescale);
     e12:	9e b5       	in	r25, 0x2e	; 46
     e14:	81 81       	ldd	r24, Z+1	; 0x01
     e16:	89 2b       	or	r24, r25
     e18:	8e bd       	out	0x2e, r24	; 46
	/* Set Trigger Edge (Falling or Rising) */
	*TIMER1_CTRL_REG_B |= ((Config_Ptr->Trigger_Edge)<<ICU_TIMER1_EDGE_SELECT_BIT);
     e1a:	8e b5       	in	r24, 0x2e	; 46
     e1c:	92 81       	ldd	r25, Z+2	; 0x02
     e1e:	40 e4       	ldi	r20, 0x40	; 64
     e20:	94 9f       	mul	r25, r20
     e22:	90 01       	movw	r18, r0
     e24:	11 24       	eor	r1, r1
     e26:	28 2b       	or	r18, r24
     e28:	2e bd       	out	0x2e, r18	; 46
	/* Set Interrupt State */
	*TIMERS_INT_MASK_REG |= ((Config_Ptr->Int_State)<<ICU_TIMER1_INT_BIT);
     e2a:	29 b7       	in	r18, 0x39	; 57
     e2c:	93 81       	ldd	r25, Z+3	; 0x03
     e2e:	30 e2       	ldi	r19, 0x20	; 32
     e30:	93 9f       	mul	r25, r19
     e32:	c0 01       	movw	r24, r0
     e34:	11 24       	eor	r1, r1
     e36:	82 2b       	or	r24, r18
     e38:	89 bf       	out	0x39, r24	; 57
	/* Clear Timer 1 and ICR Values */
	*(uint16*)TIMER1_CNTR_REG_L = 0x0000U;
     e3a:	1d bc       	out	0x2d, r1	; 45
     e3c:	1c bc       	out	0x2c, r1	; 44
	*(uint16*)TIMER1_INP_CAPT_REG_L = 0x0000U;
     e3e:	17 bc       	out	0x27, r1	; 39
     e40:	16 bc       	out	0x26, r1	; 38
     e42:	08 95       	ret

00000e44 <ICU_SetTriggerEdge>:
}

void ICU_SetTriggerEdge(ICU_TimerChannelType Tmr_Channel, ICU_TriggerEdgeType Edge) {
	CLEAR_BIT(*TIMER1_CTRL_REG_B, ICU_TIMER1_EDGE_SELECT_BIT);
     e44:	9e b5       	in	r25, 0x2e	; 46
     e46:	9f 7b       	andi	r25, 0xBF	; 191
     e48:	9e bd       	out	0x2e, r25	; 46
    *TIMER1_CTRL_REG_B |= (Edge<<ICU_TIMER1_EDGE_SELECT_BIT);
     e4a:	9e b5       	in	r25, 0x2e	; 46
     e4c:	80 e4       	ldi	r24, 0x40	; 64
     e4e:	68 9f       	mul	r22, r24
     e50:	b0 01       	movw	r22, r0
     e52:	11 24       	eor	r1, r1
     e54:	69 2b       	or	r22, r25
     e56:	6e bd       	out	0x2e, r22	; 46
     e58:	08 95       	ret

00000e5a <ICU_ClearTimerValue>:

}

void ICU_ClearTimerValue(ICU_TimerChannelType Tmr_Channel) {
	
	*(uint16*)TIMER1_CNTR_REG_L = 0x0000U;
     e5a:	1d bc       	out	0x2d, r1	; 45
     e5c:	1c bc       	out	0x2c, r1	; 44
     e5e:	08 95       	ret

00000e60 <ICU_GetInputCaptureValue>:
	uint16 u16Local_Value = 0U;
    u16Local_Value = (*(uint16*)TIMER1_INP_CAPT_REG_L);

	
	return u16Local_Value;
}
     e60:	86 b5       	in	r24, 0x26	; 38
     e62:	97 b5       	in	r25, 0x27	; 39
     e64:	08 95       	ret

00000e66 <ICU_GetStatus>:



ICU_StatusType ICU_GetStatus(ICU_TimerChannelType Tmr_Channel) {
	
		if (READ_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT) == 1) {
     e66:	08 b6       	in	r0, 0x38	; 56
     e68:	05 fe       	sbrs	r0, 5
     e6a:	05 c0       	rjmp	.+10     	; 0xe76 <ICU_GetStatus+0x10>
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);  /* Clear Flag */
     e6c:	88 b7       	in	r24, 0x38	; 56
     e6e:	80 62       	ori	r24, 0x20	; 32
     e70:	88 bf       	out	0x38, r24	; 56
			return ICU_EVENT_CATURED;
     e72:	81 e0       	ldi	r24, 0x01	; 1
     e74:	08 95       	ret
		}
		
		else {
			return ICU_RUNNING;
     e76:	80 e0       	ldi	r24, 0x00	; 0
		}
	
	return ICU_RUNNING;
}
     e78:	08 95       	ret

00000e7a <ICU_GetDutyCycle>:




void ICU_GetDutyCycle(ICU_TimerChannelType Tmr_Channel, uint16 Prescale_Value, ICU_DutyCycleType* Duty_Ptr) {
     e7a:	4f 92       	push	r4
     e7c:	5f 92       	push	r5
     e7e:	6f 92       	push	r6
     e80:	7f 92       	push	r7
     e82:	8f 92       	push	r8
     e84:	9f 92       	push	r9
     e86:	af 92       	push	r10
     e88:	bf 92       	push	r11
     e8a:	cf 92       	push	r12
     e8c:	df 92       	push	r13
     e8e:	ef 92       	push	r14
     e90:	ff 92       	push	r15
     e92:	0f 93       	push	r16
     e94:	1f 93       	push	r17
     e96:	cf 93       	push	r28
     e98:	df 93       	push	r29
     e9a:	eb 01       	movw	r28, r22
     e9c:	8a 01       	movw	r16, r20
/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
     e9e:	88 b7       	in	r24, 0x38	; 56
     ea0:	80 62       	ori	r24, 0x20	; 32
     ea2:	88 bf       	out	0x38, r24	; 56
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_RISING_EDGE);
     ea4:	61 e0       	ldi	r22, 0x01	; 1
     ea6:	80 e0       	ldi	r24, 0x00	; 0
     ea8:	0e 94 22 07 	call	0xe44	; 0xe44 <ICU_SetTriggerEdge>
	/* Wait for the start of the period at rising edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
     eac:	80 e0       	ldi	r24, 0x00	; 0
     eae:	0e 94 33 07 	call	0xe66	; 0xe66 <ICU_GetStatus>
     eb2:	88 23       	and	r24, r24
     eb4:	d9 f3       	breq	.-10     	; 0xeac <ICU_GetDutyCycle+0x32>
		; // Do Nothing
	}

	uint32 u32Local_ON_Counts = 0U;
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_FALLING_EDGE);
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	80 e0       	ldi	r24, 0x00	; 0
     eba:	0e 94 22 07 	call	0xe44	; 0xe44 <ICU_SetTriggerEdge>
	ICU_ClearTimerValue(ICU_TIMER_1);
     ebe:	80 e0       	ldi	r24, 0x00	; 0
     ec0:	0e 94 2d 07 	call	0xe5a	; 0xe5a <ICU_ClearTimerValue>
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
     ec4:	88 b7       	in	r24, 0x38	; 56
     ec6:	80 62       	ori	r24, 0x20	; 32
     ec8:	88 bf       	out	0x38, r24	; 56
	/* Wait for the start of the period at rising edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
		; // Do Nothing
	}

	uint32 u32Local_ON_Counts = 0U;
     eca:	c1 2c       	mov	r12, r1
     ecc:	d1 2c       	mov	r13, r1
     ece:	76 01       	movw	r14, r12
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_FALLING_EDGE);
	ICU_ClearTimerValue(ICU_TIMER_1);
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
	/* Wait for the end of the high time at falling edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
     ed0:	09 c0       	rjmp	.+18     	; 0xee4 <ICU_GetDutyCycle+0x6a>
		if (READ_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
     ed2:	08 b6       	in	r0, 0x38	; 56
     ed4:	02 fe       	sbrs	r0, 2
     ed6:	06 c0       	rjmp	.+12     	; 0xee4 <ICU_GetDutyCycle+0x6a>
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
     ed8:	88 b7       	in	r24, 0x38	; 56
     eda:	84 60       	ori	r24, 0x04	; 4
     edc:	88 bf       	out	0x38, r24	; 56
			u32Local_ON_Counts += ICU_TIMER1_RESOLUTION;
     ede:	8f ef       	ldi	r24, 0xFF	; 255
     ee0:	e8 1a       	sub	r14, r24
     ee2:	f8 0a       	sbc	r15, r24
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_FALLING_EDGE);
	ICU_ClearTimerValue(ICU_TIMER_1);
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
	/* Wait for the end of the high time at falling edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
     ee4:	80 e0       	ldi	r24, 0x00	; 0
     ee6:	0e 94 33 07 	call	0xe66	; 0xe66 <ICU_GetStatus>
     eea:	88 23       	and	r24, r24
     eec:	91 f3       	breq	.-28     	; 0xed2 <ICU_GetDutyCycle+0x58>
		if (READ_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
			u32Local_ON_Counts += ICU_TIMER1_RESOLUTION;
		}
	}
	u32Local_ON_Counts += ICU_GetInputCaptureValue(ICU_TIMER_1);
     eee:	80 e0       	ldi	r24, 0x00	; 0
     ef0:	0e 94 30 07 	call	0xe60	; 0xe60 <ICU_GetInputCaptureValue>
     ef4:	c8 0e       	add	r12, r24
     ef6:	d9 1e       	adc	r13, r25
     ef8:	e1 1c       	adc	r14, r1
     efa:	f1 1c       	adc	r15, r1

	uint32 u32Local_OFF_Counts = 0U;
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_RISING_EDGE);
     efc:	61 e0       	ldi	r22, 0x01	; 1
     efe:	80 e0       	ldi	r24, 0x00	; 0
     f00:	0e 94 22 07 	call	0xe44	; 0xe44 <ICU_SetTriggerEdge>
	ICU_ClearTimerValue(ICU_TIMER_1);
     f04:	80 e0       	ldi	r24, 0x00	; 0
     f06:	0e 94 2d 07 	call	0xe5a	; 0xe5a <ICU_ClearTimerValue>
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
     f0a:	88 b7       	in	r24, 0x38	; 56
     f0c:	80 62       	ori	r24, 0x20	; 32
     f0e:	88 bf       	out	0x38, r24	; 56
	/* Wait for the end of the period at rising edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
     f10:	06 c0       	rjmp	.+12     	; 0xf1e <ICU_GetDutyCycle+0xa4>
		if (READ_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
     f12:	08 b6       	in	r0, 0x38	; 56
     f14:	02 fe       	sbrs	r0, 2
     f16:	03 c0       	rjmp	.+6      	; 0xf1e <ICU_GetDutyCycle+0xa4>
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
     f18:	88 b7       	in	r24, 0x38	; 56
     f1a:	84 60       	ori	r24, 0x04	; 4
     f1c:	88 bf       	out	0x38, r24	; 56
	ICU_SetTriggerEdge(ICU_TIMER_1, ICU_TRIGGER_RISING_EDGE);
	ICU_ClearTimerValue(ICU_TIMER_1);
	/* Clear Input Capture Flag for safety */
	SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_INT_BIT);
	/* Wait for the end of the period at rising edge */
	while (ICU_GetStatus(ICU_TIMER_1) == ICU_RUNNING) {
     f1e:	80 e0       	ldi	r24, 0x00	; 0
     f20:	0e 94 33 07 	call	0xe66	; 0xe66 <ICU_GetStatus>
     f24:	88 23       	and	r24, r24
     f26:	a9 f3       	breq	.-22     	; 0xf12 <ICU_GetDutyCycle+0x98>
		if (READ_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT) == 1) {
			SET_BIT(*TIMERS_INT_FLAG_REG, ICU_TIMER1_OVF_FLAG_BIT);
			u32Local_OFF_Counts += ICU_TIMER1_RESOLUTION;
		}
	}
	u32Local_OFF_Counts = ICU_GetInputCaptureValue(ICU_TIMER_1);
     f28:	80 e0       	ldi	r24, 0x00	; 0
     f2a:	0e 94 30 07 	call	0xe60	; 0xe60 <ICU_GetInputCaptureValue>
     f2e:	4c 01       	movw	r8, r24
     f30:	a1 2c       	mov	r10, r1
     f32:	b1 2c       	mov	r11, r1

	/* Set counts */
	//strLocal_Duty.High_Time = u32Local_ON_Counts;
	//strLocal_Duty.Period_Time = u32Local_ON_Counts + u32Local_OFF_Counts;
	/* Convert these into milliseconds */
	Duty_Ptr->High_Time = (float32)(u32Local_ON_Counts * Prescale_Value * 1000.0 / F_CPU);
     f34:	2e 01       	movw	r4, r28
     f36:	61 2c       	mov	r6, r1
     f38:	71 2c       	mov	r7, r1
     f3a:	a7 01       	movw	r20, r14
     f3c:	96 01       	movw	r18, r12
     f3e:	c3 01       	movw	r24, r6
     f40:	b2 01       	movw	r22, r4
     f42:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__mulsi3>
     f46:	0e 94 58 09 	call	0x12b0	; 0x12b0 <__floatunsisf>
     f4a:	20 e0       	ldi	r18, 0x00	; 0
     f4c:	30 e0       	ldi	r19, 0x00	; 0
     f4e:	4a e7       	ldi	r20, 0x7A	; 122
     f50:	54 e4       	ldi	r21, 0x44	; 68
     f52:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__mulsf3>
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	34 e2       	ldi	r19, 0x24	; 36
     f5a:	44 e7       	ldi	r20, 0x74	; 116
     f5c:	5b e4       	ldi	r21, 0x4B	; 75
     f5e:	0e 94 b7 08 	call	0x116e	; 0x116e <__divsf3>
     f62:	f8 01       	movw	r30, r16
     f64:	60 83       	st	Z, r22
     f66:	71 83       	std	Z+1, r23	; 0x01
     f68:	82 83       	std	Z+2, r24	; 0x02
     f6a:	93 83       	std	Z+3, r25	; 0x03
	Duty_Ptr->Period_Time = (float32)((u32Local_ON_Counts+u32Local_OFF_Counts) * Prescale_Value * 1000.0 / F_CPU);
     f6c:	c7 01       	movw	r24, r14
     f6e:	b6 01       	movw	r22, r12
     f70:	68 0d       	add	r22, r8
     f72:	79 1d       	adc	r23, r9
     f74:	8a 1d       	adc	r24, r10
     f76:	9b 1d       	adc	r25, r11
     f78:	a3 01       	movw	r20, r6
     f7a:	92 01       	movw	r18, r4
     f7c:	0e 94 53 0a 	call	0x14a6	; 0x14a6 <__mulsi3>
     f80:	0e 94 58 09 	call	0x12b0	; 0x12b0 <__floatunsisf>
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	4a e7       	ldi	r20, 0x7A	; 122
     f8a:	54 e4       	ldi	r21, 0x44	; 68
     f8c:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__mulsf3>
     f90:	20 e0       	ldi	r18, 0x00	; 0
     f92:	34 e2       	ldi	r19, 0x24	; 36
     f94:	44 e7       	ldi	r20, 0x74	; 116
     f96:	5b e4       	ldi	r21, 0x4B	; 75
     f98:	0e 94 b7 08 	call	0x116e	; 0x116e <__divsf3>
     f9c:	f8 01       	movw	r30, r16
     f9e:	64 83       	std	Z+4, r22	; 0x04
     fa0:	75 83       	std	Z+5, r23	; 0x05
     fa2:	86 83       	std	Z+6, r24	; 0x06
     fa4:	97 83       	std	Z+7, r25	; 0x07
}
     fa6:	df 91       	pop	r29
     fa8:	cf 91       	pop	r28
     faa:	1f 91       	pop	r17
     fac:	0f 91       	pop	r16
     fae:	ff 90       	pop	r15
     fb0:	ef 90       	pop	r14
     fb2:	df 90       	pop	r13
     fb4:	cf 90       	pop	r12
     fb6:	bf 90       	pop	r11
     fb8:	af 90       	pop	r10
     fba:	9f 90       	pop	r9
     fbc:	8f 90       	pop	r8
     fbe:	7f 90       	pop	r7
     fc0:	6f 90       	pop	r6
     fc2:	5f 90       	pop	r5
     fc4:	4f 90       	pop	r4
     fc6:	08 95       	ret

00000fc8 <PWM_Init>:



                                       /*				Implementations                               */

void PWM_Init(const PWM_ConfigurationType* Config_Ptr) {
     fc8:	fc 01       	movw	r30, r24
	/* Make PB3=OC0 as output */
	// DIO_SetPinDirection(DIO_PORT_B, DIO_PIN_3, DIO_OUTPUT);
	SET_BIT(*PORTB_DIR_REG, 3U);
     fca:	87 b3       	in	r24, 0x17	; 23
     fcc:	88 60       	ori	r24, 0x08	; 8
     fce:	87 bb       	out	0x17, r24	; 23
	/* Clear TCCR0 Register Configurations */
	*TIMER0_CTRL_REG = 0x00U;
     fd0:	13 be       	out	0x33, r1	; 51
	/* Set PWM Mode */
	*TIMER0_CTRL_REG |= (1U<<6U) | ((Config_Ptr->Mode)<<PWM_TIMER_0_FAST_BIT);
     fd2:	23 b7       	in	r18, 0x33	; 51
     fd4:	91 81       	ldd	r25, Z+1	; 0x01
     fd6:	99 0f       	add	r25, r25
     fd8:	99 0f       	add	r25, r25
     fda:	99 0f       	add	r25, r25
     fdc:	92 2b       	or	r25, r18
     fde:	90 64       	ori	r25, 0x40	; 64
     fe0:	93 bf       	out	0x33, r25	; 51
	/* Set PWM Output State (inverting or not) */
	*TIMER0_CTRL_REG |= (1U<<5U) | ((Config_Ptr->State)<<PWM_TIMER_0_INVERTING_BIT);
     fe2:	23 b7       	in	r18, 0x33	; 51
     fe4:	93 81       	ldd	r25, Z+3	; 0x03
     fe6:	92 95       	swap	r25
     fe8:	90 7f       	andi	r25, 0xF0	; 240
     fea:	92 2b       	or	r25, r18
     fec:	90 62       	ori	r25, 0x20	; 32
     fee:	93 bf       	out	0x33, r25	; 51
	/* Select Clock Source and Prescaler */
	switch (Config_Ptr->Clk_Prescale) {
     ff0:	82 81       	ldd	r24, Z+2	; 0x02
     ff2:	84 30       	cpi	r24, 0x04	; 4
     ff4:	69 f0       	breq	.+26     	; 0x1010 <PWM_Init+0x48>
     ff6:	18 f4       	brcc	.+6      	; 0xffe <PWM_Init+0x36>
     ff8:	83 30       	cpi	r24, 0x03	; 3
     ffa:	30 f0       	brcs	.+12     	; 0x1008 <PWM_Init+0x40>
     ffc:	12 c0       	rjmp	.+36     	; 0x1022 <PWM_Init+0x5a>
     ffe:	9a ef       	ldi	r25, 0xFA	; 250
    1000:	98 0f       	add	r25, r24
    1002:	94 30       	cpi	r25, 0x04	; 4
    1004:	50 f0       	brcs	.+20     	; 0x101a <PWM_Init+0x52>
    1006:	0d c0       	rjmp	.+26     	; 0x1022 <PWM_Init+0x5a>
		case PWM_NO_CLK_SRC:
		case PWM_PRESCALE_1:
		case PWM_PRESCALE_8:
		*TIMER0_CTRL_REG |= (Config_Ptr->Clk_Prescale); break;
    1008:	93 b7       	in	r25, 0x33	; 51
    100a:	89 2b       	or	r24, r25
    100c:	83 bf       	out	0x33, r24	; 51
    100e:	09 c0       	rjmp	.+18     	; 0x1022 <PWM_Init+0x5a>
		case PWM_PRESCALE_64:
		*TIMER0_CTRL_REG |= ((Config_Ptr->Clk_Prescale)-1U); break;
    1010:	93 b7       	in	r25, 0x33	; 51
    1012:	81 50       	subi	r24, 0x01	; 1
    1014:	89 2b       	or	r24, r25
    1016:	83 bf       	out	0x33, r24	; 51
    1018:	04 c0       	rjmp	.+8      	; 0x1022 <PWM_Init+0x5a>
		case PWM_PRESCALE_256:
		case PWM_PRESCALE_1024:
		case PWM_EXT_CLK_FALLING_EDGE:
		case PWM_EXT_CLK_RISING_EDGE:
		*TIMER0_CTRL_REG |= ((Config_Ptr->Clk_Prescale)-2U); break;
    101a:	93 b7       	in	r25, 0x33	; 51
    101c:	82 50       	subi	r24, 0x02	; 2
    101e:	89 2b       	or	r24, r25
    1020:	83 bf       	out	0x33, r24	; 51
		default: break;
	}
	/* Set Duty Value in OCR0 Register */
	*TIMER0_CMP_REG = 0x00U;
    1022:	1c be       	out	0x3c, r1	; 60
	switch (Config_Ptr->State) {
    1024:	83 81       	ldd	r24, Z+3	; 0x03
    1026:	88 23       	and	r24, r24
    1028:	19 f0       	breq	.+6      	; 0x1030 <PWM_Init+0x68>
    102a:	81 30       	cpi	r24, 0x01	; 1
    102c:	a1 f0       	breq	.+40     	; 0x1056 <PWM_Init+0x8e>
    102e:	30 c0       	rjmp	.+96     	; 0x1090 <PWM_Init+0xc8>
		case PWM_NON_INVERTED: *TIMER0_CMP_REG = (uint8)((Config_Ptr->Duty_Percent) * PWM_TIMER_0_RESOLUTION / 100.0); break;
    1030:	60 85       	ldd	r22, Z+8	; 0x08
    1032:	8f ef       	ldi	r24, 0xFF	; 255
    1034:	68 9f       	mul	r22, r24
    1036:	b0 01       	movw	r22, r0
    1038:	11 24       	eor	r1, r1
    103a:	80 e0       	ldi	r24, 0x00	; 0
    103c:	90 e0       	ldi	r25, 0x00	; 0
    103e:	0e 94 58 09 	call	0x12b0	; 0x12b0 <__floatunsisf>
    1042:	20 e0       	ldi	r18, 0x00	; 0
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	48 ec       	ldi	r20, 0xC8	; 200
    1048:	52 e4       	ldi	r21, 0x42	; 66
    104a:	0e 94 b7 08 	call	0x116e	; 0x116e <__divsf3>
    104e:	0e 94 29 09 	call	0x1252	; 0x1252 <__fixunssfsi>
    1052:	6c bf       	out	0x3c, r22	; 60
    1054:	1d c0       	rjmp	.+58     	; 0x1090 <PWM_Init+0xc8>
		case PWM_INVERTED: *TIMER0_CMP_REG = (uint8)((100.0 - Config_Ptr->Duty_Percent) * PWM_TIMER_0_RESOLUTION / 100.0); break;
    1056:	60 85       	ldd	r22, Z+8	; 0x08
    1058:	70 e0       	ldi	r23, 0x00	; 0
    105a:	80 e0       	ldi	r24, 0x00	; 0
    105c:	90 e0       	ldi	r25, 0x00	; 0
    105e:	0e 94 5a 09 	call	0x12b4	; 0x12b4 <__floatsisf>
    1062:	9b 01       	movw	r18, r22
    1064:	ac 01       	movw	r20, r24
    1066:	60 e0       	ldi	r22, 0x00	; 0
    1068:	70 e0       	ldi	r23, 0x00	; 0
    106a:	88 ec       	ldi	r24, 0xC8	; 200
    106c:	92 e4       	ldi	r25, 0x42	; 66
    106e:	0e 94 4a 08 	call	0x1094	; 0x1094 <__subsf3>
    1072:	20 e0       	ldi	r18, 0x00	; 0
    1074:	30 e0       	ldi	r19, 0x00	; 0
    1076:	4f e7       	ldi	r20, 0x7F	; 127
    1078:	53 e4       	ldi	r21, 0x43	; 67
    107a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <__mulsf3>
    107e:	20 e0       	ldi	r18, 0x00	; 0
    1080:	30 e0       	ldi	r19, 0x00	; 0
    1082:	48 ec       	ldi	r20, 0xC8	; 200
    1084:	52 e4       	ldi	r21, 0x42	; 66
    1086:	0e 94 b7 08 	call	0x116e	; 0x116e <__divsf3>
    108a:	0e 94 29 09 	call	0x1252	; 0x1252 <__fixunssfsi>
    108e:	6c bf       	out	0x3c, r22	; 60
		default: break;
	}
	/* Clear TCNT0 Register Configurations */
	*TIMER0_CNTR_REG = 0x00U;
    1090:	12 be       	out	0x32, r1	; 50
    1092:	08 95       	ret

00001094 <__subsf3>:
    1094:	50 58       	subi	r21, 0x80	; 128

00001096 <__addsf3>:
    1096:	bb 27       	eor	r27, r27
    1098:	aa 27       	eor	r26, r26
    109a:	0e 94 62 08 	call	0x10c4	; 0x10c4 <__addsf3x>
    109e:	0c 94 ac 09 	jmp	0x1358	; 0x1358 <__fp_round>
    10a2:	0e 94 9e 09 	call	0x133c	; 0x133c <__fp_pscA>
    10a6:	38 f0       	brcs	.+14     	; 0x10b6 <__addsf3+0x20>
    10a8:	0e 94 a5 09 	call	0x134a	; 0x134a <__fp_pscB>
    10ac:	20 f0       	brcs	.+8      	; 0x10b6 <__addsf3+0x20>
    10ae:	39 f4       	brne	.+14     	; 0x10be <__addsf3+0x28>
    10b0:	9f 3f       	cpi	r25, 0xFF	; 255
    10b2:	19 f4       	brne	.+6      	; 0x10ba <__addsf3+0x24>
    10b4:	26 f4       	brtc	.+8      	; 0x10be <__addsf3+0x28>
    10b6:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <__fp_nan>
    10ba:	0e f4       	brtc	.+2      	; 0x10be <__addsf3+0x28>
    10bc:	e0 95       	com	r30
    10be:	e7 fb       	bst	r30, 7
    10c0:	0c 94 95 09 	jmp	0x132a	; 0x132a <__fp_inf>

000010c4 <__addsf3x>:
    10c4:	e9 2f       	mov	r30, r25
    10c6:	0e 94 bd 09 	call	0x137a	; 0x137a <__fp_split3>
    10ca:	58 f3       	brcs	.-42     	; 0x10a2 <__addsf3+0xc>
    10cc:	ba 17       	cp	r27, r26
    10ce:	62 07       	cpc	r22, r18
    10d0:	73 07       	cpc	r23, r19
    10d2:	84 07       	cpc	r24, r20
    10d4:	95 07       	cpc	r25, r21
    10d6:	20 f0       	brcs	.+8      	; 0x10e0 <__addsf3x+0x1c>
    10d8:	79 f4       	brne	.+30     	; 0x10f8 <__addsf3x+0x34>
    10da:	a6 f5       	brtc	.+104    	; 0x1144 <__addsf3x+0x80>
    10dc:	0c 94 df 09 	jmp	0x13be	; 0x13be <__fp_zero>
    10e0:	0e f4       	brtc	.+2      	; 0x10e4 <__addsf3x+0x20>
    10e2:	e0 95       	com	r30
    10e4:	0b 2e       	mov	r0, r27
    10e6:	ba 2f       	mov	r27, r26
    10e8:	a0 2d       	mov	r26, r0
    10ea:	0b 01       	movw	r0, r22
    10ec:	b9 01       	movw	r22, r18
    10ee:	90 01       	movw	r18, r0
    10f0:	0c 01       	movw	r0, r24
    10f2:	ca 01       	movw	r24, r20
    10f4:	a0 01       	movw	r20, r0
    10f6:	11 24       	eor	r1, r1
    10f8:	ff 27       	eor	r31, r31
    10fa:	59 1b       	sub	r21, r25
    10fc:	99 f0       	breq	.+38     	; 0x1124 <__addsf3x+0x60>
    10fe:	59 3f       	cpi	r21, 0xF9	; 249
    1100:	50 f4       	brcc	.+20     	; 0x1116 <__addsf3x+0x52>
    1102:	50 3e       	cpi	r21, 0xE0	; 224
    1104:	68 f1       	brcs	.+90     	; 0x1160 <__addsf3x+0x9c>
    1106:	1a 16       	cp	r1, r26
    1108:	f0 40       	sbci	r31, 0x00	; 0
    110a:	a2 2f       	mov	r26, r18
    110c:	23 2f       	mov	r18, r19
    110e:	34 2f       	mov	r19, r20
    1110:	44 27       	eor	r20, r20
    1112:	58 5f       	subi	r21, 0xF8	; 248
    1114:	f3 cf       	rjmp	.-26     	; 0x10fc <__addsf3x+0x38>
    1116:	46 95       	lsr	r20
    1118:	37 95       	ror	r19
    111a:	27 95       	ror	r18
    111c:	a7 95       	ror	r26
    111e:	f0 40       	sbci	r31, 0x00	; 0
    1120:	53 95       	inc	r21
    1122:	c9 f7       	brne	.-14     	; 0x1116 <__addsf3x+0x52>
    1124:	7e f4       	brtc	.+30     	; 0x1144 <__addsf3x+0x80>
    1126:	1f 16       	cp	r1, r31
    1128:	ba 0b       	sbc	r27, r26
    112a:	62 0b       	sbc	r22, r18
    112c:	73 0b       	sbc	r23, r19
    112e:	84 0b       	sbc	r24, r20
    1130:	ba f0       	brmi	.+46     	; 0x1160 <__addsf3x+0x9c>
    1132:	91 50       	subi	r25, 0x01	; 1
    1134:	a1 f0       	breq	.+40     	; 0x115e <__addsf3x+0x9a>
    1136:	ff 0f       	add	r31, r31
    1138:	bb 1f       	adc	r27, r27
    113a:	66 1f       	adc	r22, r22
    113c:	77 1f       	adc	r23, r23
    113e:	88 1f       	adc	r24, r24
    1140:	c2 f7       	brpl	.-16     	; 0x1132 <__addsf3x+0x6e>
    1142:	0e c0       	rjmp	.+28     	; 0x1160 <__addsf3x+0x9c>
    1144:	ba 0f       	add	r27, r26
    1146:	62 1f       	adc	r22, r18
    1148:	73 1f       	adc	r23, r19
    114a:	84 1f       	adc	r24, r20
    114c:	48 f4       	brcc	.+18     	; 0x1160 <__addsf3x+0x9c>
    114e:	87 95       	ror	r24
    1150:	77 95       	ror	r23
    1152:	67 95       	ror	r22
    1154:	b7 95       	ror	r27
    1156:	f7 95       	ror	r31
    1158:	9e 3f       	cpi	r25, 0xFE	; 254
    115a:	08 f0       	brcs	.+2      	; 0x115e <__addsf3x+0x9a>
    115c:	b0 cf       	rjmp	.-160    	; 0x10be <__addsf3+0x28>
    115e:	93 95       	inc	r25
    1160:	88 0f       	add	r24, r24
    1162:	08 f0       	brcs	.+2      	; 0x1166 <__addsf3x+0xa2>
    1164:	99 27       	eor	r25, r25
    1166:	ee 0f       	add	r30, r30
    1168:	97 95       	ror	r25
    116a:	87 95       	ror	r24
    116c:	08 95       	ret

0000116e <__divsf3>:
    116e:	0e 94 cb 08 	call	0x1196	; 0x1196 <__divsf3x>
    1172:	0c 94 ac 09 	jmp	0x1358	; 0x1358 <__fp_round>
    1176:	0e 94 a5 09 	call	0x134a	; 0x134a <__fp_pscB>
    117a:	58 f0       	brcs	.+22     	; 0x1192 <__divsf3+0x24>
    117c:	0e 94 9e 09 	call	0x133c	; 0x133c <__fp_pscA>
    1180:	40 f0       	brcs	.+16     	; 0x1192 <__divsf3+0x24>
    1182:	29 f4       	brne	.+10     	; 0x118e <__divsf3+0x20>
    1184:	5f 3f       	cpi	r21, 0xFF	; 255
    1186:	29 f0       	breq	.+10     	; 0x1192 <__divsf3+0x24>
    1188:	0c 94 95 09 	jmp	0x132a	; 0x132a <__fp_inf>
    118c:	51 11       	cpse	r21, r1
    118e:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <__fp_szero>
    1192:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <__fp_nan>

00001196 <__divsf3x>:
    1196:	0e 94 bd 09 	call	0x137a	; 0x137a <__fp_split3>
    119a:	68 f3       	brcs	.-38     	; 0x1176 <__divsf3+0x8>

0000119c <__divsf3_pse>:
    119c:	99 23       	and	r25, r25
    119e:	b1 f3       	breq	.-20     	; 0x118c <__divsf3+0x1e>
    11a0:	55 23       	and	r21, r21
    11a2:	91 f3       	breq	.-28     	; 0x1188 <__divsf3+0x1a>
    11a4:	95 1b       	sub	r25, r21
    11a6:	55 0b       	sbc	r21, r21
    11a8:	bb 27       	eor	r27, r27
    11aa:	aa 27       	eor	r26, r26
    11ac:	62 17       	cp	r22, r18
    11ae:	73 07       	cpc	r23, r19
    11b0:	84 07       	cpc	r24, r20
    11b2:	38 f0       	brcs	.+14     	; 0x11c2 <__divsf3_pse+0x26>
    11b4:	9f 5f       	subi	r25, 0xFF	; 255
    11b6:	5f 4f       	sbci	r21, 0xFF	; 255
    11b8:	22 0f       	add	r18, r18
    11ba:	33 1f       	adc	r19, r19
    11bc:	44 1f       	adc	r20, r20
    11be:	aa 1f       	adc	r26, r26
    11c0:	a9 f3       	breq	.-22     	; 0x11ac <__divsf3_pse+0x10>
    11c2:	35 d0       	rcall	.+106    	; 0x122e <__divsf3_pse+0x92>
    11c4:	0e 2e       	mov	r0, r30
    11c6:	3a f0       	brmi	.+14     	; 0x11d6 <__divsf3_pse+0x3a>
    11c8:	e0 e8       	ldi	r30, 0x80	; 128
    11ca:	32 d0       	rcall	.+100    	; 0x1230 <__divsf3_pse+0x94>
    11cc:	91 50       	subi	r25, 0x01	; 1
    11ce:	50 40       	sbci	r21, 0x00	; 0
    11d0:	e6 95       	lsr	r30
    11d2:	00 1c       	adc	r0, r0
    11d4:	ca f7       	brpl	.-14     	; 0x11c8 <__divsf3_pse+0x2c>
    11d6:	2b d0       	rcall	.+86     	; 0x122e <__divsf3_pse+0x92>
    11d8:	fe 2f       	mov	r31, r30
    11da:	29 d0       	rcall	.+82     	; 0x122e <__divsf3_pse+0x92>
    11dc:	66 0f       	add	r22, r22
    11de:	77 1f       	adc	r23, r23
    11e0:	88 1f       	adc	r24, r24
    11e2:	bb 1f       	adc	r27, r27
    11e4:	26 17       	cp	r18, r22
    11e6:	37 07       	cpc	r19, r23
    11e8:	48 07       	cpc	r20, r24
    11ea:	ab 07       	cpc	r26, r27
    11ec:	b0 e8       	ldi	r27, 0x80	; 128
    11ee:	09 f0       	breq	.+2      	; 0x11f2 <__divsf3_pse+0x56>
    11f0:	bb 0b       	sbc	r27, r27
    11f2:	80 2d       	mov	r24, r0
    11f4:	bf 01       	movw	r22, r30
    11f6:	ff 27       	eor	r31, r31
    11f8:	93 58       	subi	r25, 0x83	; 131
    11fa:	5f 4f       	sbci	r21, 0xFF	; 255
    11fc:	3a f0       	brmi	.+14     	; 0x120c <__divsf3_pse+0x70>
    11fe:	9e 3f       	cpi	r25, 0xFE	; 254
    1200:	51 05       	cpc	r21, r1
    1202:	78 f0       	brcs	.+30     	; 0x1222 <__divsf3_pse+0x86>
    1204:	0c 94 95 09 	jmp	0x132a	; 0x132a <__fp_inf>
    1208:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <__fp_szero>
    120c:	5f 3f       	cpi	r21, 0xFF	; 255
    120e:	e4 f3       	brlt	.-8      	; 0x1208 <__divsf3_pse+0x6c>
    1210:	98 3e       	cpi	r25, 0xE8	; 232
    1212:	d4 f3       	brlt	.-12     	; 0x1208 <__divsf3_pse+0x6c>
    1214:	86 95       	lsr	r24
    1216:	77 95       	ror	r23
    1218:	67 95       	ror	r22
    121a:	b7 95       	ror	r27
    121c:	f7 95       	ror	r31
    121e:	9f 5f       	subi	r25, 0xFF	; 255
    1220:	c9 f7       	brne	.-14     	; 0x1214 <__divsf3_pse+0x78>
    1222:	88 0f       	add	r24, r24
    1224:	91 1d       	adc	r25, r1
    1226:	96 95       	lsr	r25
    1228:	87 95       	ror	r24
    122a:	97 f9       	bld	r25, 7
    122c:	08 95       	ret
    122e:	e1 e0       	ldi	r30, 0x01	; 1
    1230:	66 0f       	add	r22, r22
    1232:	77 1f       	adc	r23, r23
    1234:	88 1f       	adc	r24, r24
    1236:	bb 1f       	adc	r27, r27
    1238:	62 17       	cp	r22, r18
    123a:	73 07       	cpc	r23, r19
    123c:	84 07       	cpc	r24, r20
    123e:	ba 07       	cpc	r27, r26
    1240:	20 f0       	brcs	.+8      	; 0x124a <__divsf3_pse+0xae>
    1242:	62 1b       	sub	r22, r18
    1244:	73 0b       	sbc	r23, r19
    1246:	84 0b       	sbc	r24, r20
    1248:	ba 0b       	sbc	r27, r26
    124a:	ee 1f       	adc	r30, r30
    124c:	88 f7       	brcc	.-30     	; 0x1230 <__divsf3_pse+0x94>
    124e:	e0 95       	com	r30
    1250:	08 95       	ret

00001252 <__fixunssfsi>:
    1252:	0e 94 c5 09 	call	0x138a	; 0x138a <__fp_splitA>
    1256:	88 f0       	brcs	.+34     	; 0x127a <__fixunssfsi+0x28>
    1258:	9f 57       	subi	r25, 0x7F	; 127
    125a:	98 f0       	brcs	.+38     	; 0x1282 <__fixunssfsi+0x30>
    125c:	b9 2f       	mov	r27, r25
    125e:	99 27       	eor	r25, r25
    1260:	b7 51       	subi	r27, 0x17	; 23
    1262:	b0 f0       	brcs	.+44     	; 0x1290 <__fixunssfsi+0x3e>
    1264:	e1 f0       	breq	.+56     	; 0x129e <__fixunssfsi+0x4c>
    1266:	66 0f       	add	r22, r22
    1268:	77 1f       	adc	r23, r23
    126a:	88 1f       	adc	r24, r24
    126c:	99 1f       	adc	r25, r25
    126e:	1a f0       	brmi	.+6      	; 0x1276 <__fixunssfsi+0x24>
    1270:	ba 95       	dec	r27
    1272:	c9 f7       	brne	.-14     	; 0x1266 <__fixunssfsi+0x14>
    1274:	14 c0       	rjmp	.+40     	; 0x129e <__fixunssfsi+0x4c>
    1276:	b1 30       	cpi	r27, 0x01	; 1
    1278:	91 f0       	breq	.+36     	; 0x129e <__fixunssfsi+0x4c>
    127a:	0e 94 df 09 	call	0x13be	; 0x13be <__fp_zero>
    127e:	b1 e0       	ldi	r27, 0x01	; 1
    1280:	08 95       	ret
    1282:	0c 94 df 09 	jmp	0x13be	; 0x13be <__fp_zero>
    1286:	67 2f       	mov	r22, r23
    1288:	78 2f       	mov	r23, r24
    128a:	88 27       	eor	r24, r24
    128c:	b8 5f       	subi	r27, 0xF8	; 248
    128e:	39 f0       	breq	.+14     	; 0x129e <__fixunssfsi+0x4c>
    1290:	b9 3f       	cpi	r27, 0xF9	; 249
    1292:	cc f3       	brlt	.-14     	; 0x1286 <__fixunssfsi+0x34>
    1294:	86 95       	lsr	r24
    1296:	77 95       	ror	r23
    1298:	67 95       	ror	r22
    129a:	b3 95       	inc	r27
    129c:	d9 f7       	brne	.-10     	; 0x1294 <__fixunssfsi+0x42>
    129e:	3e f4       	brtc	.+14     	; 0x12ae <__fixunssfsi+0x5c>
    12a0:	90 95       	com	r25
    12a2:	80 95       	com	r24
    12a4:	70 95       	com	r23
    12a6:	61 95       	neg	r22
    12a8:	7f 4f       	sbci	r23, 0xFF	; 255
    12aa:	8f 4f       	sbci	r24, 0xFF	; 255
    12ac:	9f 4f       	sbci	r25, 0xFF	; 255
    12ae:	08 95       	ret

000012b0 <__floatunsisf>:
    12b0:	e8 94       	clt
    12b2:	09 c0       	rjmp	.+18     	; 0x12c6 <__floatsisf+0x12>

000012b4 <__floatsisf>:
    12b4:	97 fb       	bst	r25, 7
    12b6:	3e f4       	brtc	.+14     	; 0x12c6 <__floatsisf+0x12>
    12b8:	90 95       	com	r25
    12ba:	80 95       	com	r24
    12bc:	70 95       	com	r23
    12be:	61 95       	neg	r22
    12c0:	7f 4f       	sbci	r23, 0xFF	; 255
    12c2:	8f 4f       	sbci	r24, 0xFF	; 255
    12c4:	9f 4f       	sbci	r25, 0xFF	; 255
    12c6:	99 23       	and	r25, r25
    12c8:	a9 f0       	breq	.+42     	; 0x12f4 <__floatsisf+0x40>
    12ca:	f9 2f       	mov	r31, r25
    12cc:	96 e9       	ldi	r25, 0x96	; 150
    12ce:	bb 27       	eor	r27, r27
    12d0:	93 95       	inc	r25
    12d2:	f6 95       	lsr	r31
    12d4:	87 95       	ror	r24
    12d6:	77 95       	ror	r23
    12d8:	67 95       	ror	r22
    12da:	b7 95       	ror	r27
    12dc:	f1 11       	cpse	r31, r1
    12de:	f8 cf       	rjmp	.-16     	; 0x12d0 <__floatsisf+0x1c>
    12e0:	fa f4       	brpl	.+62     	; 0x1320 <__floatsisf+0x6c>
    12e2:	bb 0f       	add	r27, r27
    12e4:	11 f4       	brne	.+4      	; 0x12ea <__floatsisf+0x36>
    12e6:	60 ff       	sbrs	r22, 0
    12e8:	1b c0       	rjmp	.+54     	; 0x1320 <__floatsisf+0x6c>
    12ea:	6f 5f       	subi	r22, 0xFF	; 255
    12ec:	7f 4f       	sbci	r23, 0xFF	; 255
    12ee:	8f 4f       	sbci	r24, 0xFF	; 255
    12f0:	9f 4f       	sbci	r25, 0xFF	; 255
    12f2:	16 c0       	rjmp	.+44     	; 0x1320 <__floatsisf+0x6c>
    12f4:	88 23       	and	r24, r24
    12f6:	11 f0       	breq	.+4      	; 0x12fc <__floatsisf+0x48>
    12f8:	96 e9       	ldi	r25, 0x96	; 150
    12fa:	11 c0       	rjmp	.+34     	; 0x131e <__floatsisf+0x6a>
    12fc:	77 23       	and	r23, r23
    12fe:	21 f0       	breq	.+8      	; 0x1308 <__floatsisf+0x54>
    1300:	9e e8       	ldi	r25, 0x8E	; 142
    1302:	87 2f       	mov	r24, r23
    1304:	76 2f       	mov	r23, r22
    1306:	05 c0       	rjmp	.+10     	; 0x1312 <__floatsisf+0x5e>
    1308:	66 23       	and	r22, r22
    130a:	71 f0       	breq	.+28     	; 0x1328 <__floatsisf+0x74>
    130c:	96 e8       	ldi	r25, 0x86	; 134
    130e:	86 2f       	mov	r24, r22
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	60 e0       	ldi	r22, 0x00	; 0
    1314:	2a f0       	brmi	.+10     	; 0x1320 <__floatsisf+0x6c>
    1316:	9a 95       	dec	r25
    1318:	66 0f       	add	r22, r22
    131a:	77 1f       	adc	r23, r23
    131c:	88 1f       	adc	r24, r24
    131e:	da f7       	brpl	.-10     	; 0x1316 <__floatsisf+0x62>
    1320:	88 0f       	add	r24, r24
    1322:	96 95       	lsr	r25
    1324:	87 95       	ror	r24
    1326:	97 f9       	bld	r25, 7
    1328:	08 95       	ret

0000132a <__fp_inf>:
    132a:	97 f9       	bld	r25, 7
    132c:	9f 67       	ori	r25, 0x7F	; 127
    132e:	80 e8       	ldi	r24, 0x80	; 128
    1330:	70 e0       	ldi	r23, 0x00	; 0
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	08 95       	ret

00001336 <__fp_nan>:
    1336:	9f ef       	ldi	r25, 0xFF	; 255
    1338:	80 ec       	ldi	r24, 0xC0	; 192
    133a:	08 95       	ret

0000133c <__fp_pscA>:
    133c:	00 24       	eor	r0, r0
    133e:	0a 94       	dec	r0
    1340:	16 16       	cp	r1, r22
    1342:	17 06       	cpc	r1, r23
    1344:	18 06       	cpc	r1, r24
    1346:	09 06       	cpc	r0, r25
    1348:	08 95       	ret

0000134a <__fp_pscB>:
    134a:	00 24       	eor	r0, r0
    134c:	0a 94       	dec	r0
    134e:	12 16       	cp	r1, r18
    1350:	13 06       	cpc	r1, r19
    1352:	14 06       	cpc	r1, r20
    1354:	05 06       	cpc	r0, r21
    1356:	08 95       	ret

00001358 <__fp_round>:
    1358:	09 2e       	mov	r0, r25
    135a:	03 94       	inc	r0
    135c:	00 0c       	add	r0, r0
    135e:	11 f4       	brne	.+4      	; 0x1364 <__fp_round+0xc>
    1360:	88 23       	and	r24, r24
    1362:	52 f0       	brmi	.+20     	; 0x1378 <__fp_round+0x20>
    1364:	bb 0f       	add	r27, r27
    1366:	40 f4       	brcc	.+16     	; 0x1378 <__fp_round+0x20>
    1368:	bf 2b       	or	r27, r31
    136a:	11 f4       	brne	.+4      	; 0x1370 <__fp_round+0x18>
    136c:	60 ff       	sbrs	r22, 0
    136e:	04 c0       	rjmp	.+8      	; 0x1378 <__fp_round+0x20>
    1370:	6f 5f       	subi	r22, 0xFF	; 255
    1372:	7f 4f       	sbci	r23, 0xFF	; 255
    1374:	8f 4f       	sbci	r24, 0xFF	; 255
    1376:	9f 4f       	sbci	r25, 0xFF	; 255
    1378:	08 95       	ret

0000137a <__fp_split3>:
    137a:	57 fd       	sbrc	r21, 7
    137c:	90 58       	subi	r25, 0x80	; 128
    137e:	44 0f       	add	r20, r20
    1380:	55 1f       	adc	r21, r21
    1382:	59 f0       	breq	.+22     	; 0x139a <__fp_splitA+0x10>
    1384:	5f 3f       	cpi	r21, 0xFF	; 255
    1386:	71 f0       	breq	.+28     	; 0x13a4 <__fp_splitA+0x1a>
    1388:	47 95       	ror	r20

0000138a <__fp_splitA>:
    138a:	88 0f       	add	r24, r24
    138c:	97 fb       	bst	r25, 7
    138e:	99 1f       	adc	r25, r25
    1390:	61 f0       	breq	.+24     	; 0x13aa <__fp_splitA+0x20>
    1392:	9f 3f       	cpi	r25, 0xFF	; 255
    1394:	79 f0       	breq	.+30     	; 0x13b4 <__fp_splitA+0x2a>
    1396:	87 95       	ror	r24
    1398:	08 95       	ret
    139a:	12 16       	cp	r1, r18
    139c:	13 06       	cpc	r1, r19
    139e:	14 06       	cpc	r1, r20
    13a0:	55 1f       	adc	r21, r21
    13a2:	f2 cf       	rjmp	.-28     	; 0x1388 <__fp_split3+0xe>
    13a4:	46 95       	lsr	r20
    13a6:	f1 df       	rcall	.-30     	; 0x138a <__fp_splitA>
    13a8:	08 c0       	rjmp	.+16     	; 0x13ba <__fp_splitA+0x30>
    13aa:	16 16       	cp	r1, r22
    13ac:	17 06       	cpc	r1, r23
    13ae:	18 06       	cpc	r1, r24
    13b0:	99 1f       	adc	r25, r25
    13b2:	f1 cf       	rjmp	.-30     	; 0x1396 <__fp_splitA+0xc>
    13b4:	86 95       	lsr	r24
    13b6:	71 05       	cpc	r23, r1
    13b8:	61 05       	cpc	r22, r1
    13ba:	08 94       	sec
    13bc:	08 95       	ret

000013be <__fp_zero>:
    13be:	e8 94       	clt

000013c0 <__fp_szero>:
    13c0:	bb 27       	eor	r27, r27
    13c2:	66 27       	eor	r22, r22
    13c4:	77 27       	eor	r23, r23
    13c6:	cb 01       	movw	r24, r22
    13c8:	97 f9       	bld	r25, 7
    13ca:	08 95       	ret

000013cc <__mulsf3>:
    13cc:	0e 94 f9 09 	call	0x13f2	; 0x13f2 <__mulsf3x>
    13d0:	0c 94 ac 09 	jmp	0x1358	; 0x1358 <__fp_round>
    13d4:	0e 94 9e 09 	call	0x133c	; 0x133c <__fp_pscA>
    13d8:	38 f0       	brcs	.+14     	; 0x13e8 <__mulsf3+0x1c>
    13da:	0e 94 a5 09 	call	0x134a	; 0x134a <__fp_pscB>
    13de:	20 f0       	brcs	.+8      	; 0x13e8 <__mulsf3+0x1c>
    13e0:	95 23       	and	r25, r21
    13e2:	11 f0       	breq	.+4      	; 0x13e8 <__mulsf3+0x1c>
    13e4:	0c 94 95 09 	jmp	0x132a	; 0x132a <__fp_inf>
    13e8:	0c 94 9b 09 	jmp	0x1336	; 0x1336 <__fp_nan>
    13ec:	11 24       	eor	r1, r1
    13ee:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <__fp_szero>

000013f2 <__mulsf3x>:
    13f2:	0e 94 bd 09 	call	0x137a	; 0x137a <__fp_split3>
    13f6:	70 f3       	brcs	.-36     	; 0x13d4 <__mulsf3+0x8>

000013f8 <__mulsf3_pse>:
    13f8:	95 9f       	mul	r25, r21
    13fa:	c1 f3       	breq	.-16     	; 0x13ec <__mulsf3+0x20>
    13fc:	95 0f       	add	r25, r21
    13fe:	50 e0       	ldi	r21, 0x00	; 0
    1400:	55 1f       	adc	r21, r21
    1402:	62 9f       	mul	r22, r18
    1404:	f0 01       	movw	r30, r0
    1406:	72 9f       	mul	r23, r18
    1408:	bb 27       	eor	r27, r27
    140a:	f0 0d       	add	r31, r0
    140c:	b1 1d       	adc	r27, r1
    140e:	63 9f       	mul	r22, r19
    1410:	aa 27       	eor	r26, r26
    1412:	f0 0d       	add	r31, r0
    1414:	b1 1d       	adc	r27, r1
    1416:	aa 1f       	adc	r26, r26
    1418:	64 9f       	mul	r22, r20
    141a:	66 27       	eor	r22, r22
    141c:	b0 0d       	add	r27, r0
    141e:	a1 1d       	adc	r26, r1
    1420:	66 1f       	adc	r22, r22
    1422:	82 9f       	mul	r24, r18
    1424:	22 27       	eor	r18, r18
    1426:	b0 0d       	add	r27, r0
    1428:	a1 1d       	adc	r26, r1
    142a:	62 1f       	adc	r22, r18
    142c:	73 9f       	mul	r23, r19
    142e:	b0 0d       	add	r27, r0
    1430:	a1 1d       	adc	r26, r1
    1432:	62 1f       	adc	r22, r18
    1434:	83 9f       	mul	r24, r19
    1436:	a0 0d       	add	r26, r0
    1438:	61 1d       	adc	r22, r1
    143a:	22 1f       	adc	r18, r18
    143c:	74 9f       	mul	r23, r20
    143e:	33 27       	eor	r19, r19
    1440:	a0 0d       	add	r26, r0
    1442:	61 1d       	adc	r22, r1
    1444:	23 1f       	adc	r18, r19
    1446:	84 9f       	mul	r24, r20
    1448:	60 0d       	add	r22, r0
    144a:	21 1d       	adc	r18, r1
    144c:	82 2f       	mov	r24, r18
    144e:	76 2f       	mov	r23, r22
    1450:	6a 2f       	mov	r22, r26
    1452:	11 24       	eor	r1, r1
    1454:	9f 57       	subi	r25, 0x7F	; 127
    1456:	50 40       	sbci	r21, 0x00	; 0
    1458:	9a f0       	brmi	.+38     	; 0x1480 <__mulsf3_pse+0x88>
    145a:	f1 f0       	breq	.+60     	; 0x1498 <__mulsf3_pse+0xa0>
    145c:	88 23       	and	r24, r24
    145e:	4a f0       	brmi	.+18     	; 0x1472 <__mulsf3_pse+0x7a>
    1460:	ee 0f       	add	r30, r30
    1462:	ff 1f       	adc	r31, r31
    1464:	bb 1f       	adc	r27, r27
    1466:	66 1f       	adc	r22, r22
    1468:	77 1f       	adc	r23, r23
    146a:	88 1f       	adc	r24, r24
    146c:	91 50       	subi	r25, 0x01	; 1
    146e:	50 40       	sbci	r21, 0x00	; 0
    1470:	a9 f7       	brne	.-22     	; 0x145c <__mulsf3_pse+0x64>
    1472:	9e 3f       	cpi	r25, 0xFE	; 254
    1474:	51 05       	cpc	r21, r1
    1476:	80 f0       	brcs	.+32     	; 0x1498 <__mulsf3_pse+0xa0>
    1478:	0c 94 95 09 	jmp	0x132a	; 0x132a <__fp_inf>
    147c:	0c 94 e0 09 	jmp	0x13c0	; 0x13c0 <__fp_szero>
    1480:	5f 3f       	cpi	r21, 0xFF	; 255
    1482:	e4 f3       	brlt	.-8      	; 0x147c <__mulsf3_pse+0x84>
    1484:	98 3e       	cpi	r25, 0xE8	; 232
    1486:	d4 f3       	brlt	.-12     	; 0x147c <__mulsf3_pse+0x84>
    1488:	86 95       	lsr	r24
    148a:	77 95       	ror	r23
    148c:	67 95       	ror	r22
    148e:	b7 95       	ror	r27
    1490:	f7 95       	ror	r31
    1492:	e7 95       	ror	r30
    1494:	9f 5f       	subi	r25, 0xFF	; 255
    1496:	c1 f7       	brne	.-16     	; 0x1488 <__mulsf3_pse+0x90>
    1498:	fe 2b       	or	r31, r30
    149a:	88 0f       	add	r24, r24
    149c:	91 1d       	adc	r25, r1
    149e:	96 95       	lsr	r25
    14a0:	87 95       	ror	r24
    14a2:	97 f9       	bld	r25, 7
    14a4:	08 95       	ret

000014a6 <__mulsi3>:
    14a6:	db 01       	movw	r26, r22
    14a8:	8f 93       	push	r24
    14aa:	9f 93       	push	r25
    14ac:	0e 94 88 0a 	call	0x1510	; 0x1510 <__muluhisi3>
    14b0:	bf 91       	pop	r27
    14b2:	af 91       	pop	r26
    14b4:	a2 9f       	mul	r26, r18
    14b6:	80 0d       	add	r24, r0
    14b8:	91 1d       	adc	r25, r1
    14ba:	a3 9f       	mul	r26, r19
    14bc:	90 0d       	add	r25, r0
    14be:	b2 9f       	mul	r27, r18
    14c0:	90 0d       	add	r25, r0
    14c2:	11 24       	eor	r1, r1
    14c4:	08 95       	ret

000014c6 <__divmodsi4>:
    14c6:	05 2e       	mov	r0, r21
    14c8:	97 fb       	bst	r25, 7
    14ca:	1e f4       	brtc	.+6      	; 0x14d2 <__divmodsi4+0xc>
    14cc:	00 94       	com	r0
    14ce:	0e 94 7a 0a 	call	0x14f4	; 0x14f4 <__negsi2>
    14d2:	57 fd       	sbrc	r21, 7
    14d4:	07 d0       	rcall	.+14     	; 0x14e4 <__divmodsi4_neg2>
    14d6:	0e 94 b1 0a 	call	0x1562	; 0x1562 <__udivmodsi4>
    14da:	07 fc       	sbrc	r0, 7
    14dc:	03 d0       	rcall	.+6      	; 0x14e4 <__divmodsi4_neg2>
    14de:	4e f4       	brtc	.+18     	; 0x14f2 <__divmodsi4_exit>
    14e0:	0c 94 7a 0a 	jmp	0x14f4	; 0x14f4 <__negsi2>

000014e4 <__divmodsi4_neg2>:
    14e4:	50 95       	com	r21
    14e6:	40 95       	com	r20
    14e8:	30 95       	com	r19
    14ea:	21 95       	neg	r18
    14ec:	3f 4f       	sbci	r19, 0xFF	; 255
    14ee:	4f 4f       	sbci	r20, 0xFF	; 255
    14f0:	5f 4f       	sbci	r21, 0xFF	; 255

000014f2 <__divmodsi4_exit>:
    14f2:	08 95       	ret

000014f4 <__negsi2>:
    14f4:	90 95       	com	r25
    14f6:	80 95       	com	r24
    14f8:	70 95       	com	r23
    14fa:	61 95       	neg	r22
    14fc:	7f 4f       	sbci	r23, 0xFF	; 255
    14fe:	8f 4f       	sbci	r24, 0xFF	; 255
    1500:	9f 4f       	sbci	r25, 0xFF	; 255
    1502:	08 95       	ret

00001504 <__tablejump2__>:
    1504:	ee 0f       	add	r30, r30
    1506:	ff 1f       	adc	r31, r31
    1508:	05 90       	lpm	r0, Z+
    150a:	f4 91       	lpm	r31, Z
    150c:	e0 2d       	mov	r30, r0
    150e:	09 94       	ijmp

00001510 <__muluhisi3>:
    1510:	0e 94 d3 0a 	call	0x15a6	; 0x15a6 <__umulhisi3>
    1514:	a5 9f       	mul	r26, r21
    1516:	90 0d       	add	r25, r0
    1518:	b4 9f       	mul	r27, r20
    151a:	90 0d       	add	r25, r0
    151c:	a4 9f       	mul	r26, r20
    151e:	80 0d       	add	r24, r0
    1520:	91 1d       	adc	r25, r1
    1522:	11 24       	eor	r1, r1
    1524:	08 95       	ret

00001526 <__ashrdi3>:
    1526:	97 fb       	bst	r25, 7
    1528:	10 f8       	bld	r1, 0

0000152a <__lshrdi3>:
    152a:	16 94       	lsr	r1
    152c:	00 08       	sbc	r0, r0
    152e:	0f 93       	push	r16
    1530:	08 30       	cpi	r16, 0x08	; 8
    1532:	98 f0       	brcs	.+38     	; 0x155a <__lshrdi3+0x30>
    1534:	08 50       	subi	r16, 0x08	; 8
    1536:	23 2f       	mov	r18, r19
    1538:	34 2f       	mov	r19, r20
    153a:	45 2f       	mov	r20, r21
    153c:	56 2f       	mov	r21, r22
    153e:	67 2f       	mov	r22, r23
    1540:	78 2f       	mov	r23, r24
    1542:	89 2f       	mov	r24, r25
    1544:	90 2d       	mov	r25, r0
    1546:	f4 cf       	rjmp	.-24     	; 0x1530 <__lshrdi3+0x6>
    1548:	05 94       	asr	r0
    154a:	97 95       	ror	r25
    154c:	87 95       	ror	r24
    154e:	77 95       	ror	r23
    1550:	67 95       	ror	r22
    1552:	57 95       	ror	r21
    1554:	47 95       	ror	r20
    1556:	37 95       	ror	r19
    1558:	27 95       	ror	r18
    155a:	0a 95       	dec	r16
    155c:	aa f7       	brpl	.-22     	; 0x1548 <__lshrdi3+0x1e>
    155e:	0f 91       	pop	r16
    1560:	08 95       	ret

00001562 <__udivmodsi4>:
    1562:	a1 e2       	ldi	r26, 0x21	; 33
    1564:	1a 2e       	mov	r1, r26
    1566:	aa 1b       	sub	r26, r26
    1568:	bb 1b       	sub	r27, r27
    156a:	fd 01       	movw	r30, r26
    156c:	0d c0       	rjmp	.+26     	; 0x1588 <__udivmodsi4_ep>

0000156e <__udivmodsi4_loop>:
    156e:	aa 1f       	adc	r26, r26
    1570:	bb 1f       	adc	r27, r27
    1572:	ee 1f       	adc	r30, r30
    1574:	ff 1f       	adc	r31, r31
    1576:	a2 17       	cp	r26, r18
    1578:	b3 07       	cpc	r27, r19
    157a:	e4 07       	cpc	r30, r20
    157c:	f5 07       	cpc	r31, r21
    157e:	20 f0       	brcs	.+8      	; 0x1588 <__udivmodsi4_ep>
    1580:	a2 1b       	sub	r26, r18
    1582:	b3 0b       	sbc	r27, r19
    1584:	e4 0b       	sbc	r30, r20
    1586:	f5 0b       	sbc	r31, r21

00001588 <__udivmodsi4_ep>:
    1588:	66 1f       	adc	r22, r22
    158a:	77 1f       	adc	r23, r23
    158c:	88 1f       	adc	r24, r24
    158e:	99 1f       	adc	r25, r25
    1590:	1a 94       	dec	r1
    1592:	69 f7       	brne	.-38     	; 0x156e <__udivmodsi4_loop>
    1594:	60 95       	com	r22
    1596:	70 95       	com	r23
    1598:	80 95       	com	r24
    159a:	90 95       	com	r25
    159c:	9b 01       	movw	r18, r22
    159e:	ac 01       	movw	r20, r24
    15a0:	bd 01       	movw	r22, r26
    15a2:	cf 01       	movw	r24, r30
    15a4:	08 95       	ret

000015a6 <__umulhisi3>:
    15a6:	a2 9f       	mul	r26, r18
    15a8:	b0 01       	movw	r22, r0
    15aa:	b3 9f       	mul	r27, r19
    15ac:	c0 01       	movw	r24, r0
    15ae:	a3 9f       	mul	r26, r19
    15b0:	70 0d       	add	r23, r0
    15b2:	81 1d       	adc	r24, r1
    15b4:	11 24       	eor	r1, r1
    15b6:	91 1d       	adc	r25, r1
    15b8:	b2 9f       	mul	r27, r18
    15ba:	70 0d       	add	r23, r0
    15bc:	81 1d       	adc	r24, r1
    15be:	11 24       	eor	r1, r1
    15c0:	91 1d       	adc	r25, r1
    15c2:	08 95       	ret

000015c4 <_exit>:
    15c4:	f8 94       	cli

000015c6 <__stop_program>:
    15c6:	ff cf       	rjmp	.-2      	; 0x15c6 <__stop_program>
